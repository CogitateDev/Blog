[{"content":"","date":null,"permalink":"/en/tags/android/","section":"Tags","summary":"","title":"Android"},{"content":" We know that the screen displays content by emitting RGB lamp beads one by one, and the brightness of the lamp beads is determined by a memory area. By writing data to this memory area, we can observe the data display effect on the screen. This is a complex and flexible job. In order to facilitate this work, the pioneers developed the OpenGL standard, and our story will start from here.\nOpenGL ES #OpenGL ES is a streamlined version of OpenGL. The Android platform has provided support for OpenGL ES since its release. However, different versions support different OpenGL ES versions. The current mainstream versions are still 2.0 and 3.0. OpenGL ES is a set of APIs that provide developers with the ability to configure data, transfer data, and draw content. Its work is strictly related to drawing, so OpenGL ES alone will not cause a big obstacle to understanding. The problem lies in the configuration environment for configuring OpenGL ES. Why should we separate the OpenGL ES API and the configuration environment? Because OpenGL ES is a cross-platform API, but it needs to be bound to a specific platform, such as Android, for actual operation. The conditions required to prepare the OpenGL ES environment are different between platforms. In order to ensure the cross-platform capabilities of OpenGL ES, it is necessary to separate the configuration environment and bind it to a specific platform. On Android, this configuration environment is EGL. Clarifying the difference between the OpenGL ES API and configuring the OpenGL ES environment is not only very helpful in understanding these two key concepts, but also greatly helps in debugging the code and troubleshooting later.\nWorkflow #After clarifying some basic concepts, our next most important task is to clarify the workflow of OpenGL ES. Many tutorials start by listing a lot of nouns or giving examples directly, which I think is inappropriate. Only by becoming familiar with the workflow can we know what to do when writing code and locate problems faster and more accurately during debugging.\nPrepare environment #OpenGL ES is composed of a series of APIs, but it does not mean that these APIs can be called at any time. Instead, it requires some settings in the running environment, which is the preparation environment. Preparing the environment usually involves doing some video memory allocation and window configuration work, which is very tedious but essential.\nPrepare shader #Shaders are very important, but for beginners, you don’t need to pay too much attention to them. Many effects can be directly found in ready-made codes online, but how to assemble these codes into a complete runnable program is not necessarily known. . We just need to be clear that shaders are an important part of OpenGL ES development, and this is where the magic happens.\nPrepare program #Although shaders are important, they cannot run independently and need to be managed by a program. The program in question is an OpenGL ES object that is responsible for putting the shaders together. This object is required before running most OpenGL ES APIs.\nrendering #The rendering process is actually preparing data. We need to assign some data used in the shader, and then call the drawing API to complete the final drawing work. The GPU will pass the data to the shader, and the shader will go through the pipeline to convert the data into final display data and store it in the video memory.\nDisplay #Rendering does not mean that the data is displayed, but that the data is calculated. To see the calculated data on the screen, you may need to call a function in the OpenGL ES environment configuration tool, such as exchanging buffers or switching display objects.\nClean up #Like memory, we will also apply for some resources when using the OpenGL ES API. After rendering, we should actively release the resources for subsequent program use. Many times when our normal application for resources fails, it may be because the previous resources have not been released.\nThe above is the general process for developing OpenGL ES applications. Since OpenGL ES development is difficult to debug, the most effective way to locate problems when discovering them is to determine the error link and then deal with it in a targeted manner. So it’s important to be familiar with the process.\nGet started with examples #Since there are many concepts related to OpenGLES, in order to minimize the interference of related concepts, this article intends to focus on only the first step in the above process. At the same time, use the knowledge points involved to implement a minimal example-dye the window red.\nLet’s start with the first concept—EGL.\nEGL #OpenGL ES is only an abstraction of drawing and does not provide an abstraction of the running environment. If you want to apply for video memory, you need to specify where the video is stored. After the image is calculated, you also need to specify where it will be displayed. EGL is a collection of these environmental abstractions. In order to explain the relevant concepts in a popular way, we can play a role-playing role-what should we do if we are asked to design relevant standards.\nThe first thing that is easy to think of is that we need a monitor, because OpenGL ES will eventually generate a set of color data. If we want to see these colors, we definitely need a monitor to display these color data. At the same time, we know that monitors also have many specifications and features. In order to be compatible with various low-end to high-end monitors, it is definitely necessary to make a layer of abstraction for it and provide some methods for setting properties. This is EGLDisplay\u0026rsquo;s task.\nAfter determining the display, we will find that we can only select the entire display or not use it every time. When we actually use it, there must be situations where only one area is displayed, or multiple areas are displayed at the same time. In order to meet this usage scenario , it is necessary to further divide the display so that it can support the simultaneous operation of multiple areas, and the person responsible for this layer of abstraction task is EGLSurface .\nSince they all support multiple areas, it must be possible to configure the areas. Maybe on the same monitor, one area only needs to display black and white pixels, and another area needs to display high-definition pictures. In order to make these configurations effective and independent of each other, An abstraction is definitely needed, which must be able to save the display configuration and isolate the OpenGL ES environment so that API calls to OpenGL ES in one area will not affect another area. This is EGLContext .\nThe above are the three core concepts of EGL, which are the abstraction of the display, display area, and display configuration.\nThe above concepts are all scattered, and we definitely need to connect all the parts together in actual work, so it is necessary to make a summary of their work processes. First we need to obtain a EGLDisplay to determine the final display device, and then configure a display area EGLSurface according to the configuration supported by the display device. Finally, use EGLContext to connect EGLDisplay and EGLSurface . Once the association is successful, it means that the OpenGL ES environment is ready. The next step is to create a shader, create a shader program, and prepare for drawing.\nAfter sorting out the process, let\u0026rsquo;s take a look at how to write the code. In order to minimize the barriers to understanding, this article will use the Java-side interface as an example.\nPrepare EGLDisplay #Learning any new skill requires an entrance, and the common entrances for OpenGLES and EGL are EGLDisplay . So the first step is to get a EGLDisplay object. We cannot create this object directly, but need to obtain an object through the eglGetDisplay method. This object is very important and is the first parameter of almost all subsequent EGL-related APIs. Therefore, it usually needs to be cached for subsequent use. Although the EGLDisplay object already exists, it cannot be used directly. Need to call eglInitialize for initialization. This phenomenon is also very common in many SDKs. After obtaining the object, it needs to be initialized to ensure that the internal state is restored to the initial state.\nGet configuration #After successfully calling the eglInitialize method, the EGLDisplay object is ready and the display area can be configured. But we don’t know which configuration information is valid and which configuration information is supported, because different hardware supports different features. If we directly hard-code the configuration regardless of the hardware features, the code may fail to run on a certain device. This is not What we want to see. Therefore, in order for the configuration to be valid on all devices, the effective way is not for us to specify the configuration, but for us to actively query the hardware to see if it is the configuration we want, that is, let the EGLDisplay object tell us.\nEGLDisplay provides two methods to query the configuration supported by the hardware. One is to directly obtain all configuration information supported by the device eglGetConfigs , and the other is for the developer to list the desired configuration. Then actively query whether the device supports the listed configurations eglChooseConfig . Developers can choose any method to determine the configuration items of the display area. If the method call is successful, it is equivalent to determining the configuration items of the display area, and we can use these configuration items to configure EGLSurface .\nConfigure display area #Surface is used on the Android platform to represent the display area, but usually we do not deal directly with Surface , but use SurfaceView . However, there are limitations to using SurfaceView . Surface only valid after the surfaceCreated and before surfaceDestroyed of the SurfaceHolder in the SurafceView.That is to say, the operation of configuring the display area can only be performed after receiving the surfaceCreated callback.\nTo configure the display area, you need to use the eglCreateWindowSurface method. The first two parameters are the objects we obtained in the above two steps. The third parameter is a Surface related parameter, which can be Surface , SurfaceHolder . In addition, you can also use the fourth parameter to pass some configuration information about Surface . After the function call is successful, we obtain a EGLSurface object.\nConnect them together #So far, the EGLDisplay object and the EGLSurface object are still independent. The latter only obtains some configuration information from the former, and has no other connection. In order to associate the two together, we need to borrow the EGLContext object. Similarly, creating a EGLContext object requires passing the eglCreateContext function. The first two parameters are the EGLDisplay and EGLConfig obtained in the previous step. , the special one is the third parameter. The third parameter is EGLContext , usually EGL_NO_CONTEXT is passed, which means creating an independent EGLContext object. Another situation is that when two rendering environments want to share resources, EGL_NO_CONTEXT should be passed normally when creating the first rendering environment. When creating the second rendering environment, you need to pass the EGLContext object is passed in, then the second rendering environment can use the textures, shaders, shader programs, and buffer class objects created in the first rendering environment, which are shared by the two rendering environments. got some data. At this point, three important objects have appeared, but they are not connected to each other yet, so the eglMakeCurrent function is needed to complete this work. This function will bind the EGLContext object to the current thread and also bind the EGLContext object to EGLSurface . After the binding is completed, the three major The objects are connected and the OpenGL ES environment is ready.\nBefore entering the world of OpenGL ES, we finally review the previous EGL world in code.\nval display = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY) if (EGL14.EGL_NO_DISPLAY == display) { log() return } val versions = IntArray(2) var flag = EGL14.eglInitialize(display, versions, 0, versions, 1) if (!flag) { log() return } Log.i(TAG, \u0026#34;EGL version:major = ${versions[0]}, minor = ${versions[1]}\u0026#34;) val attr = intArrayOf( EGL14.EGL_RED_SIZE, 8, EGL14.EGL_GREEN_SIZE, 8, EGL14.EGL_BLUE_SIZE, 8, EGL14.EGL_NONE ) val configs=Array\u0026lt;EGLConfig?\u0026gt;(1,{null}) val numConfig=IntArray(1) flag = EGL14.eglChooseConfig(display, attr, 0, configs, 0, 1, numConfig, 0) if (!flag) { log() return } val config=configs.first() val eglSurface=EGL14.eglCreateWindowSurface(display,config,surface, intArrayOf(EGL14.EGL_NONE),0) if (EGL14.EGL_NO_SURFACE == eglSurface) { log() return } val context=EGL14.eglCreateContext(display,config,EGL14.EGL_NO_CONTEXT, intArrayOf(EGL14.EGL_NONE),0) if (EGL14.EGL_NO_CONTEXT == context) { log() return } flag = EGL14.eglMakeCurrent(display, eglSurface, eglSurface, context) if (!flag) { log() return } Enter the world of OpenGL ES #After a long preparation, we finally prepared the rendering environment and can use the OpenGL ES API normally. Typically, this is followed by creating shaders and shader programs. Of course, different rendering scenarios usually call different APIs. In this article, we want to dye the window red, so there is no need to create these things. We only need to call two APIs. glClearColor Set the clear screen color.glClear Set the clear screen bit.\nOf course, these two functions alone are not enough. We haven\u0026rsquo;t set the drawing area yet. Yes, you can specify the drawing area separately for each drawing. For example, for the first drawing, we draw in the upper left corner, and for the second drawing, we can draw in the lower right corner. You only need to specify the drawing area before drawing. The drawing area The specification will be valid until the next re-specification, and the function used is glViewport . The first two parameters of the function specify the starting position, and the last two parameters are the distance from the starting position.\nWith the help of these three functions, OpenGL ES will dye our dark black frame red. Let\u0026rsquo;s take a look at the code\n//We want to render the entire area, so the start point is the top left corner and the end point is the width and height of the view GLES20.glViewport(0,0,width,height) //Colour range is 0-1 GLES20.glClearColor(1f,0f,0f,1f) GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT) Display #We have dyed the window red in the previous section, but after running the application, we will find that the display is still black. That is because we forgot the final screen operation. Because after entering the OpenGL ES world, the logical thing to do is to call the OpenGL ES API. However, the fact is to always remember that the OpenGL ES API is only responsible for drawing. For display-related issues, you have to contact EGL. After OpenGL ES drawing is completed, you need to use eglSwapBuffers to complete the screen operation.\nSummary #This article is the first in the OpenGL ES series. It focuses on my general understanding of EGL and OpenGL ES. The expression may not be so rigorous. It is intended to help readers build a channel to enter this field and understand some main concepts. Basic impression, we will go into each link one by one in the later stage, hoping to have the effect of attracting new ideas.\nAfter reading this article, readers should have a simple impression of the process of developing OpenGL ES applications: EGL environment preparation, shaders, shader programs, rendering, screen loading, and cleanup. Of course, this article only focuses on the preparation of the EGL environment.\nRegarding EGL environment preparation, we have three objects, which are the display, display area, and display context, corresponding to EGLDisplay , EGLSurface , and EGLContext . Environment preparation mainly starts from EGLDisplay , obtains and configures these three objects, and finally uses eglMakeCurrent to associate them. Of course, after using the OpenGL ES API to complete rendering, remember to use `eglSwapBuffers`` to complete the screen operation.\nPlease refer to here for the source code.\n","date":"9 May 2023","permalink":"/en/post/learning%20opengles%20on%20the%20android-fill%20the%20window.html","section":"Posts","summary":"We know that the screen displays content by emitting RGB lamp beads one by one, and the brightness of the lamp beads is determined by a memory area.","title":"Android OpenGLES learning-draw a color"},{"content":"","date":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/en/","section":"Deep thinking","summary":"","title":"Deep thinking"},{"content":"","date":null,"permalink":"/en/tags/opengles/","section":"Tags","summary":"","title":"OpenGLES"},{"content":"","date":null,"permalink":"/en/categories/opengles/","section":"Categories","summary":"","title":"OpenGLES"},{"content":"","date":null,"permalink":"/en/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/en/tags/study/","section":"Tags","summary":"","title":"study"},{"content":"","date":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/en/tags/c++/","section":"Tags","summary":"","title":"C++"},{"content":"","date":null,"permalink":"/en/categories/c++/","section":"Categories","summary":"","title":"C++"},{"content":" Template have always had a pivotal role as an important feature of C++, and are a great tool for writing highly abstract code.\nWhat is template #Template are real-life examples: fix the parts that are all the same, leave the parts that change empty, and combine the two parts to form something valid when you use it. Application forms and Word templates are examples of this, as are templates in C++, but more explicitly in C++, where the variable part is a surrogate type, called a generic parameter.\nLet\u0026rsquo;s look at an example to see how templates evolved. If we need to calculate the result of adding two objects, how do we write the code? Before we write the code, we have a couple of issues that we need to discuss clearly: The first thing we need to determine is that the two objects are of what type, after all, C++ is a strongly typed programming language, variables, functions, and classes are explicitly specified as to what the type is, and the compilation of an unspecified type will not pass. Let\u0026rsquo;s assume for a moment that the two types are integers. Once we have determined the type, we need to determine how the two objects need to be added together. Based on our assumption that they are integers, we know that we can just call the operator +. Finally, we need to determine what the result type of the addition of the two objects will be, and the result of the addition of an integer type will also be an integer type. To summarize, the code for this example might look something like this\nint sum(int left,int right){ return left + right; } This example is simple, so simple that it doesn\u0026rsquo;t even need to be written as a separate function. What if the data we need to calculate is not two numbers, but the sum of an array? Based on the previous analysis and assumptions, we can also quickly implement the corresponding code\nint sum(const int data[], const std::size_t length) { int result{}; for (int i = 0; i \u0026lt; length;++i) { result += *(data + i); } return result; } Again, very simple. Unfortunately, this function is not very general, it can only compute integer sums, if we need to compute a sum with a decimal point, it doesn\u0026rsquo;t work because the first argument type doesn\u0026rsquo;t match, even though we know that almost all of sum\u0026rsquo;s code can be reused, except for the int in the first line, which needs to be replaced with double. But it can\u0026rsquo;t! We can only make a copy and change the int places to double.\ndouble sum(const double data[], const std::size_t length) { double result{}; for (int i = 0; i \u0026lt; length;++i) { result += *(data + i); } return result; } This is where you see the problem, this process, we have only changed the type information. The problem continues to grow, we may need to ask for an array sum of float again, the same array sum of double above won\u0026rsquo;t match, because float, double are two types. It is because the data types are different that many times we need to provide similar code for different data, which is painful in the case of bloated data types, and when making changes to the algorithm we need to make sure that all the data types are modified and tested one by one, which definitely increases the workload and amplifies the error rate. But the actual valid code is to specify the type, if the type is not clear, the compiler can not determine whether the code is legal, not sure things the compiler has to report an error, so in accordance with the ordinary thinking, this problem is not solved.\nBut in fact, very often, these similar codes are simply different data types, and dealing with this repetitive work should be left to the computer, i.e. the compiler. So we need a technique that allows the compiler to not care what the specific type is in the first place, but to replace it with a special type that can be replaced with any type, complete the specific algorithm with this special type, and provide the type information to the algorithm based on the actual needs at the time of use to allow the compiler to generate a specific algorithm that satisfies the provided type, which is a template. This is ideologically common with templates in life. The algorithm is the fixed part, the data type is the variable part, and the two together make legal C++ code. That is, using templates, we can write just one algorithm, and with the help of the compiler generate algorithms of all types, and the only difference between these algorithms is the type.\nOf course the template is not enough, the above only solves the problem of the type, did not solve the problem of algorithm implementation. How so, e.g. we have a requirement to sort the data first and then find the maximum value. This is valid for numeric (int, float, double, etc.) types, and can be done using comparison operators (\u0026lt;, \u0026gt;), but what if we want to make this algorithm work for custom types? Writing the comparison operator directly in the template implementation won\u0026rsquo;t work for custom types because they don\u0026rsquo;t have a corresponding comparison function. The solution is simple: the custom type implements the corresponding comparison operator. Problems such as these will often be encountered in the template, because we do not know anything about the type of information, but to ensure that almost all types can work properly, which will have to use a variety of techniques to qualify or detect the type, which is actually the essence of the template problem. So the template problem is not just a type problem, or a combination of other C++ problems, and requires a more complete understanding of C++ features in order to write useful and efficient code. In C++, templates are usually divided into function templates and template classes, so let\u0026rsquo;s start with the simpler function templates.\nFunction template #A function template is a function that differs from a regular function in that at least one of its argument list is of indeterminate type. Continue with our example above:\ntemplate \u0026lt;typename T\u0026gt; T sum(const T data[], const std::size_t length) { T result{}; for (int i = 0; i \u0026lt; length;++i) { result += *(data + i); } return result; } int main() { int intData[] = { 1, 1, 2, 2 }; float floatData[] = { 1, 1, 2, 2 }; double doubleData[] = { 1, 1, 2, 2 }; auto len = sizeof(intData)/sizeof(intData[0]); std::cout \u0026lt;\u0026lt; \u0026#34;intSum = \u0026#34; \u0026lt;\u0026lt; sum\u0026lt;int\u0026gt;(intData,len) \u0026lt;\u0026lt; \u0026#34;, floatSum = \u0026#34; \u0026lt;\u0026lt; sum\u0026lt;float\u0026gt;(floatData,len) \u0026lt;\u0026lt;\u0026#34;, doubleSum = \u0026#34; \u0026lt;\u0026lt;sum\u0026lt;double\u0026gt;(doubleData,len)\u0026lt;\u0026lt;std::endl; return 0; } // output // intSum = 6, floatSum = 6, doubleSum = 6 Here, we\u0026rsquo;ve just written a function that works for int, float, and double. If there are other types that implement the default initialization and operator += you can also use this function to sum without changing any existing code, that\u0026rsquo;s the beauty of templates. Before moving on to something new, let\u0026rsquo;s recognize the difference between a function template and a regular function:\nFunction templates require a template header, template\u0026lt;typename T\u0026gt;. It serves to tell the compiler that none of the following functions where T is encountered are of a specific type, and that it needs to be determined again when the function is called. In the function declaration, the type position is replaced by T, which means that T is a placeholder type that can be used as a normal type. This is useful when writing boilerplate code. Looking again at the use of functions, that is, statements like sum\u0026lt;xxx\u0026gt;(xxxData,len), where xxx represents the data type, which is the actual type of T in the function template. This simply tells the compiler to replace the type T in the function template with the type xxx, a process that has an official name, instantiation, which is another thing that is different from normal functions\u0026hellip;. Using function templates is a two-step process.\nDefine the template. This step does not have a specific type and requires the use of a generic parameter to placeholder the type, i.e., wherever an actual type occurs, use the generic parameter to placeholder it and use this generic parameter to implement the complete algorithm. In this step the compiler, since it does not know the exact type, will not disable some type operations, but only check if the identifier exists, if the syntax is legal etc. Instantiation. The process of instantiation happens only where the developer calls the function template, the code of the function template that is not instantiated does not appear in the most executable file. The compiler will replace the generic parameter with the actual parameter for each place where instantiation occurs, and check whether the actual type supports all the operations in the algorithm, if not, the compilation fails, and the developer needs to implement the relevant operations or modify the function template. As in the above example, if we instantiate a custom type, we will find that the compilation fails because the custom type does not define the operator += (unless that operator is already defined), and this process occurs in the instantiation. The solution is simple: add the operator += to the custom type. Type derivation #In the above example, we found that in the process of instantiation, we have to pass both the type parameter and the data parameter to the function template, and the type parameter is often one-to-one with the type of the data, which is a redundant syntax for modern C++ is unacceptable, so modern C++ compilers all support type derivation. Type derivation allows the developer to omit the type parameter and derive the type parameter directly from the data type, so the above example instantiation can be written in the form of sum(xxxData,len), and the compiler will be able to derive the type of xxx to be int, float, and double respectively. Of course, type derivation is not foolproof, let\u0026rsquo;s look at the following example\ntemplate \u0026lt;typename T\u0026gt; T max(T a, T b) { return a \u0026gt; b ? a : b; } int main() { int a = 1; int b = 2; std::cout \u0026lt;\u0026lt; \u0026#34;max(\u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;,\u0026#34;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#34;) = \u0026#34; \u0026lt;\u0026lt;max(a,b) \u0026lt;\u0026lt; std::endl; return 0; } // output // max(1,2) = 2 This example is intuitive, and the result is certainly unsurprising. Now we\u0026rsquo;re going to morph: we change the type of the variable b to float and realize that the compilation won\u0026rsquo;t pass. The hint is that we have a data type mismatch, because a is int and b is float, so the deduction is max\u0026lt;int,float\u0026gt;(), whereas in reality we have only one type parameter. So since the problem is clear, the solution seems simple enough, wouldn\u0026rsquo;t it be enough to add another parameter to max? Let\u0026rsquo;s take a look.\ntemplate \u0026lt;typename A,typename B\u0026gt; A max(A a, B b) { return a \u0026gt; b ? a : b; } int main() { int a = 1; float b = 2; std::cout \u0026lt;\u0026lt; \u0026#34;max(\u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;,\u0026#34;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#34;) = \u0026#34; \u0026lt;\u0026lt;max(a,b) \u0026lt;\u0026lt; std::endl; return 0; } // output // max(1,2) = 2 After this change, it compiles and runs without errors, so the problem seems to be solved, right? No, it\u0026rsquo;s not. Let\u0026rsquo;s replace float b = 2; with float b = 2.5;.\nint main() { int a = 1; float b = 2.5; std::cout \u0026lt;\u0026lt; \u0026#34;max(\u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;,\u0026#34;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#34;) = \u0026#34; \u0026lt;\u0026lt;max(a,b) \u0026lt;\u0026lt; std::endl; return 0; } // output // max(1,2.5) = 2 Run the program again, and you\u0026rsquo;ll see that the output is wrong. This is because in the function template, we defined the return value as A, and at instantiation time A was derived to be of type int, so in fact the return value of max became of type int, and the maximum value, B, was forcibly converted from a float to an int, and the data precision was lost. So is there a solution? There is, and there is more than one! According to the above analysis, the root of the problem is that the data has been forcibly converted, and the solution is of course to prevent it from happening, that is, to keep the two data types consistent, so how to ensure it? Block the compiler\u0026rsquo;s type derivation, manually fill in the type parameter.\nint main() { int a = 1; float b = 2.5; std::cout \u0026lt;\u0026lt; \u0026#34;max(\u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;,\u0026#34;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#34;) = \u0026#34; \u0026lt;\u0026lt;max\u0026lt;float\u0026gt;(a,b) \u0026lt;\u0026lt; std::endl; return 0; } // outout // max(1,2.5) = 2.5 As you can see in this example, we only filled in one type parameter, because type B is automatically deduced to float. Yes, type derivation can be partially disabled! Another solution is to let the compiler calculate the type entirely. How to calculate it, C++11 provides auto and decltype. auto calculates the type of a variable, and decltype calculates the type of an expression, as follows:\nauto a=1; // a is derived as type int auto b=1.5; // b is derived as type double decltype(a+b) //the result is type double That is, you can set the return value to auto and let the compiler decide the return type\ntemplate \u0026lt;typename A,typename B\u0026gt; auto max(A a, B b) { return a \u0026gt; b ? a : b; } int main() { int a = 1; float b = 2.5; std::cout \u0026lt;\u0026lt; \u0026#34;max(\u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;,\u0026#34;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#34;) = \u0026#34; \u0026lt;\u0026lt;max\u0026lt;float\u0026gt;(a,b) \u0026lt;\u0026lt; std::endl; return 0; } // output // max(1,2.5) = 2.5 If the compiler only supported C++11, it would be a bit tricky to not only front auto, but also use decltype after the function header to compute the return type, a feature known as tailed return derivation.\ntemplate \u0026lt;typename A,typename B\u0026gt; auto max(A a, B b)-\u0026gt;decltype(a + b) { return a \u0026gt; b ? a : b; } Here decltype is written inside the Let\u0026rsquo;s put the function templates aside for now, and let\u0026rsquo;s take a look at what the class template look like.\nClass template #Like function templates, class templates contain at least one generic parameter that is scoped to the entire class, meaning that member variables and member functions can be defined using this generic parameter.\ntemplate \u0026lt;typename T\u0026gt; class Result { T data; int code; std::string reason; public: Result(T data, int code = 0, std::string reason = \u0026#34;success\u0026#34;) :data{ data }, code{ code }, reason{ reason } { } friend std::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; os, const Result result) { os \u0026lt;\u0026lt; \u0026#34;Result(data = \u0026#34; \u0026lt;\u0026lt; result.data \u0026lt;\u0026lt;\u0026#34;, code = \u0026#34; \u0026lt;\u0026lt; result.code \u0026lt;\u0026lt;\u0026#34;, reason = \u0026#34; \u0026lt;\u0026lt; result.reason \u0026lt;\u0026lt;\u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; return os; } }; int main() { Result\u0026lt;int\u0026gt; result{ 9527 }; std::cout \u0026lt;\u0026lt; result \u0026lt;\u0026lt; std::endl; return 0; } // output // Result(data = 9527, code = 0, reason = success) As you can see, the class template is similar to a regular class in that it has everything that a regular class has - member functions, member variables, constructors, etc. It\u0026rsquo;s still worth mentioning the generic parameter T. The above example is a common data class in the SDK, used to indicate whether an operation was successful or not and to return the result of the operation if necessary. For returning normal data types, this class is sufficient, but if one of our interfaces does not have a return value, and traditionally returns a void type, a problem arises. The actual type of data is void, but we can\u0026rsquo;t find any value to initialize it. Further, when returning void, we don\u0026rsquo;t need the data member variable at all. To solve problems like this one, templates provide specializations.\nSpecialization and partial specialization #Specialization is the reimplementation of a class template or function template with a specific type instead of a generic parameter, which depends on the original template. As in the above example, we already have the original template class Result\u0026lt;T\u0026gt;, in order to solve the case where void cannot be used, we need to redefine a Result for the void type, i.e., Result\u0026lt;void\u0026gt;, then Result\u0026lt;void\u0026gt; is known as a kind of specialization of Result\u0026lt;T\u0026gt; and the original Result\u0026lt;T\u0026gt; is called the original template class. There can be many such specializations, and a type is a specialization which perfectly combines the advantages of both generality and specificity. When instantiation is done, if the instantiated type and the specialization type are the same, the instantiation will be done using that class (function) of the specialization, as in the following example\n// Result definition remains unchanged, new specialization version added template \u0026lt;\u0026gt; class Result\u0026lt;void\u0026gt;{ int code; std::string reason; public: Result(int code = 0, std::string reason = \u0026#34;success\u0026#34;): code{ code }, reason{ reason }{} friend std::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; os, const Result result) { os \u0026lt;\u0026lt; \u0026#34;Result(\u0026#34;\u0026lt;\u0026lt;\u0026#34;code = \u0026#34; \u0026lt;\u0026lt; result.code \u0026lt;\u0026lt; \u0026#34;, reason = \u0026#34; \u0026lt;\u0026lt; result.reason \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; return os; } }; int main() { Result\u0026lt;void\u0026gt; voidResult; Result\u0026lt;int\u0026gt; intResult{9527}; std::cout \u0026lt;\u0026lt; \u0026#34;void = \u0026#34;\u0026lt;\u0026lt; voidResult\u0026lt;\u0026lt;std::endl\u0026lt;\u0026lt;\u0026#34;int = \u0026#34; \u0026lt;\u0026lt; intResult \u0026lt;\u0026lt; std::endl; return 0; } // output // void = Result(code = 0, reason = success) // int = Result(data = 9527, code = 0, reason = success) As you can see, when instantiated to the int type, the original template class is used. And when instantiated as a void type, the specialization version is used. In addition to specialization, there is also preferential specialization. A partial specialization is much like a specialization in that it is a narrower qualification of the type to make it apply to a certain class of types, such as const, pointers, references, etc. Or partial specialization for classes with multiple generic parameters. Specialization and partial specialization are complementary to template special types and solve some problems with template implementation. Very often if the generic template is not well implemented, you can consider using specialization. Of course, the more versions of specialization, the higher the maintenance cost of the template, it is time to consider whether there is a design flaw.\nType qualification #The power of C++ templates is not only in the manipulation of types, but sometimes in order to prevent our classes from being abused, we need to qualify these abilities, such as disallowing the instantiation of certain specific types. In the example above, suppose we specify that Result must return actual data, what would be the best way to prohibit void instantiation? It\u0026rsquo;s easy to think that we would first need a way to determine whether the type at instantiation is of a particular type, and then we would need to tell the compiler to fail to compile if the instantiated type is a forbidden type. All of this is supported by the standard library type_traits. It provides a number of tools to help us recognize type parameters such as numbers, strings, pointers, etc. It also provides a number of other tools to assist these type parameter tools with more complex functions. In this case, we want the instantiation type not to be void, and after looking up type_traits, we find that there is a class is_void, which has a value constant that is true if the type parameter is void, and false otherwise. Of course it\u0026rsquo;s not enough to have a determination method, we also need a way for the compiler to report an error if the types don\u0026rsquo;t match, and as it happens, we have enable_if_t. It has two type parameters, the first is a boolean expression and the second is a type parameter. The type parameter is defined when the expression is true, otherwise the compilation fails. So in order to accomplish the function of disabling void instantiation, we need to use two tools, is_void to determine whether the type parameter is void or not, and enable_if_t to accomplish the conversion from boolean expression to type parameter. To summarize, let\u0026rsquo;s take a look at the implementation:\ntemplate \u0026lt;typename T\u0026gt; class Result { std::enable_if_t\u0026lt;!std::is_void\u0026lt;T\u0026gt;::value,T\u0026gt; data; int code; std::string reason; public: Result(std::enable_if_t\u0026lt; !std::is_void\u0026lt;T\u0026gt;::value,T\u0026gt; data, int code = 0, std::string reason = \u0026#34;success\u0026#34;) :data{ data }, code{ code }, reason{ reason } { } friend std::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; os, const Result\u0026lt; std::enable_if_t\u0026lt; !std::is_void\u0026lt;T\u0026gt;::value, T\u0026gt;\u0026gt; result) { os \u0026lt;\u0026lt; \u0026#34;Result(data = \u0026#34; \u0026lt;\u0026lt; result.data \u0026lt;\u0026lt;\u0026#34;, code = \u0026#34; \u0026lt;\u0026lt; result.code \u0026lt;\u0026lt;\u0026#34;, reason = \u0026#34; \u0026lt;\u0026lt; result.reason \u0026lt;\u0026lt;\u0026#34;)\u0026#34; \u0026lt;\u0026lt; std::endl; return os; } }; In the example, lines 3 and 8 both use type qualification, when in fact we only need to qualify T in the constructor. When instantiating Result with void, it will not compile.\nOther issues #There are two aspects of C++ templates that need to be addressed, one is the template-related issues and the other is working with other features. For example, C++11 introduced right-valued references, but right-valued references passed through parameters can cause references to collapse, losing their right-valued nature and behaving like normal reference types. This is fine for normal functions, but what if it\u0026rsquo;s a template function? C++ also provides the perfect forwarding solution. Perfect forwarding means that a right-valued reference stays a right-valued reference, and a left-valued reference stays a left-valued reference. It needs to be used in conjunction with universal references. Universal references are very similar to right-valued references, except that the universal reference type is indeterminate and can only be determined at compile time. Look at the following example\ntemplate \u0026lt;typename T\u0026gt; void test(T\u0026amp;\u0026amp; p) { std::cout \u0026lt;\u0026lt; \u0026#34;p = \u0026#34; \u0026lt;\u0026lt; std::forward\u0026lt;T\u0026gt;(p) \u0026lt;\u0026lt; std::endl; } int main() { int a = 1; test(a); test(std::move(a)); return 0; } // output // p = 1 // p = 1 T\u0026amp;\u0026amp; is a universal reference because it is of indeterminate type, and then the arguments are forwarded through std::forward\u0026lt;\u0026gt;. As you can see in lines 8 and 9, we successfully pass the left and right values to test and also successfully get the expected result without having to write a separate function for the right value to handle it. This feature of templates greatly simplifies function design and is a lifesaver for API design. In addition, function templates have the problem of overloading. Generally speaking, the priority of ordinary functions will be higher than the priority of function templates, function templates between the more special will be preferred to match and so on. These problems with the depth of understanding of the template, will slowly appear, but in the early stages of learning there is no need to spend too much effort to understand these features, everything to the main practical.\nSummary #Templates are a big topic in C++, combining the type system, the standard library, classes, and a host of other big topics. So writing perfect template code requires a complete understanding of these topics. Secondly, because the template type control is more relaxed, but also need to developers on the scope of application of the template has a global control, what is prohibited, what types need to be specialization of the treatment, should be considered in place, a little inattention will hide a difficult to detect the bugs. In short, it is a word, the template is always learning, often used often new, need to learn in practice, but also in the learning of things in practice, I wish you every time there are new gains!\nReference # type_traints ","date":"31 October 2022","permalink":"/en/post/Modern%20C++%20study%20guide-template.html","section":"Posts","summary":"Template have always had a pivotal role as an important feature of C++, and are a great tool for writing highly abstract code.","title":"Modern C++ study guide-template"},{"content":"","date":null,"permalink":"/en/tags/study-guide/","section":"Tags","summary":"","title":"Study guide"},{"content":"","date":null,"permalink":"/en/tags/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/","section":"Tags","summary":"","title":"学习指南"},{"content":" 在[上一章](https://www.yuque.com/docs/share/adb5b1e4-f3c6-46fd-ba4b-4dabce9b4f2a?# 《现代C++学习指南-类型系统》)我们探讨了C++的类型系统，并提出了从低到高，又从高到低的学习思路，本文就是一篇从高到低的学习指南，希望能提供一种新的视角。\n什么是标准库 #编程语言一般分为两个部分，一部分是语法部分，如上一章的类型系统，另一部分则是用这套语法完成的预定义的工具集，如本文的主题——标准库。标准库是一堆我们写代码时直接可以用的代码，就像是我们提前写好的一样，不仅如此，标准库还是跨平台的，还是经过工业级测试的，所以标准库有着靠谱，安全的特点。 C++标准库包括很多方面，有类vector、string等,有对象std::cin，std::cout等，还有函数move，copy等，所以一般按功能来对它们分类\n容器类 算法类 智能指针 线程相关 其他 当然，这些还不是全部，标准库是在不断扩充和完善的，学习标准库的宗旨也应该是学习它们的使用场景，而不是深入用法。比如容器类中就有很多功能类似的类，不同的业务场景有不同的选择。通过对它们的了解，我们更容易写出高效，简洁的代码。\n容器类 #容器类就是帮助管理一组数据的类，根据实现方式的不同，分为有序列表，无序列表和映射。 有序列表中的有序是指，数据组保存在一块连续的内存区域里，可以通过插入时的索引直接定位到原数据。因为数据是按顺序存入的，所以中途假如需要删除或者新增数据，在操作位置右边的数据都需要移动，操作的代价就比较大。由此也可看出它们的优势是顺序插入和尾部修改，还有直接查找，这方面的代表就是array，vector。 array是对原始数组的封装，并且解决了传递数组变成指针这样的问题，但是缺点是它的大小是固定的，适合用在数据量已知的情况。而vector又是对array的增强，不仅能完成所有array的操作，并且大小可变，所以绝大部分情况下，选择vector都是理想的选择。 无序列表的元素是单独存储的，相互之间用指针来查找相邻元素，由于指针可以轻易修改指向的指，所以对相邻元素的修改就变得很快捷。同样的道理，查找相邻元素只能靠指针跳转，查找某个值需要从一个指针开始查找，一次跳转一条数据，直到找到目标或者没有数据为止。所以无序列表的优势是快速地删除和插入新数据，不适合查找，其代表有list，forward_list。显然，有序列表和无序列表是互补的，我们在实际项目中，应该根据数据的操作来确定选择哪种容器。 映射则融合了有序列表和无序列表的优点，既可以快速插入和删除，又可以快速查找。为了满足各种使用场景，C++提供了map，multimap，unordered_map，unordered_multimap。从名字上就能看出来它们的差别。为了直观，我直接列了一个表\n是否排序 是否支持相同值 速度 unordered_map ❌ ❌ ❤️❤️❤️❤️ map ✅ ❌ ❤️❤️ multimap ✅ ✅ ❤️ unordered_multimap ✅ ✅ ❤️❤️❤️ 映射存储的是两个值，不同的类型实现方式不一样。由于map是需要排序的，所以通常它的实现是一种平衡二叉树，键就是它排序的依据。 而unordered_map是不需要排序的，所以它的实现通常是哈希表，即根据哈希函数的确定索引位置继而确定存储位置。 综上，容器类提供了一种操作多个同类型数据的接口，开发者通过对容器类方法的调用，可以实现对容器内数据的增删改查。大部分情况下，vector都是靠谱的选择，它提供了全功能的数据操作接口，支持动态长度，索引查询，并且简单高效。如果需要频繁地插入或者删除操作，也可以考虑list或者forward_list。map可以让数据保持有序，需要更快的速度而不是排序的话unorderer_map是更好的选择，如果相同值会出现多次就可以使用对应的multi版本。另外容器类也是很好的数据结构学习资源，C++的容器类几乎提供了数据结构中所有的形式，对数据结构越熟悉选择的容器类就越完美。\n算法 #之所以将算法放在容器类后面，是因为算法大部分是对容器类操作的加强，算法都定义在algorithm文件头里。这些算法都是短小精悍的，可以大大增加代码可读性，并且妥善处理了很多容易遗忘的边界问题。功能上可以分为增删改查几种操作，可以在实际有需要的时候在查看文档，具体可以参阅这里\n智能指针 #很早以前，我对智能指针的态度不是很好。因为刚开始学习C++时我就知道，不能单独使用指针，要把指针封装在类里，利用类的构造函数和析构函数管理指针，也就是RAII。最开始我以为这就够了,直到我遇到下面这种情况\npublic: Ptr():p{ new int } {} ~Ptr() { delete p; } int\u0026amp; get() { return *p; } void set(const int value) { *p = value; } private: int* p; }; void use(Ptr p) { //传进来的是复制构造出来的p\u0026#39;,函数返回后p\u0026#39;被销毁啦，两个指针指向的地址被回收，外面的p指针成为了野指针 } int main() { Ptr p; p.set(1); use(p); //p按值传递，调用了Ptr的复制构造函数，构造出了新对象p\u0026#39;,它的指针和p的指针指向同一个地方 std::cout \u0026lt;\u0026lt; p.get() \u0026lt;\u0026lt; std::endl; //p已经被销毁了，访问p的地址非法 return 0; } 调用use时，变量p被拷贝，也就出现了两个指针同时指向一块内存地址的情况。use函数执行完后，它的参数p被回收。也就是调用了Ptr的析构函数，也就是两个指针指向的地址被回收。所以24行调用get读取那个已经被回收了的地址就是非法操作，程序崩溃。 这可能是新手比较常遇到的一个问题，当然，解决这个问题也很简单，还用不到智能指针，只需要将函数use的参数改为引用类型就可以了，因为引用只是别名，不会产生新的指针，这也是我在类型系统篇中极力推荐引用为首选参数类型的原因之一。对于此例，数据不大，直接重写复制构造函数，重新申请一块内存也是一种思路。 此例中用到Ptr的地方只有一个，实际项目中Ptr往往需要用到很多次，我们不能保证不会出现忘记使用引用类型的情况，这种情况下重新申请内存也不适用，所以这个时候就需要智能指针来帮忙了。 现在思考另一种情况，某些操作我们不得不暴露出我们的指针供外部使用，随着业务的嵌套和调用链增加，很多时候会忘记或者不确定在什么时候调用delete释放内存。这也是用智能指针的一个场景。以上两种情况都是需要分享指针，对应智能指针中的shared_ptr。 shared_ptr顾名思义，它可以帮助开发者完成指针共享的问题，并且完美解决提前释放，不知何时释放，谁负责释放的问题。它的对应关系是一对多，一个实际的内存可以被多个shared_ptr共享 另外一种场景是我们希望自始至终某个指针某个时刻只属于一个对象，外部想要使用它要么通过拥有该指针的对象方法，要么把指针的所有权转移到自己身上，这种场景对应智能指针中的unique_ptr。 unique_ptr的对应关系是一对一，无论哪个时刻，只能有一个管理者拥有指针，也就只能由它负责释放了。假如想转移这种对应关系，只能通过std::move操作，不过这个操作之后，原先对象的指针就失效了，它也不再负责管理，所有的任务移交给了新的对象。这种特性特别适合资源敏感型的应用。\n线程库 #除了内存，线程是开发中另一个重要的课题。线程的难点在于不仅要管理线程对象，还要管理线程对象管理的资源，并且保证线程间数据同步。当然标准库已经做得足够好了，我们需要理解的是使用场景的问题。线程库主要包括线程对象thread，条件对象condition_variable，锁对象mutex。 使用thread可以很方便地把程序写成多线程，只需要三步：\nvoid plus(int a,int b){ //第一步：定义线程中要运行的函数 std::cout\u0026lt;\u0026lt;\u0026#34;running at sub thread\u0026#34;\u0026lt;\u0026lt;std::endl; std::cout\u0026lt;\u0026lt;\u0026#34;a + b = \u0026#34;\u0026lt;\u0026lt;a+b\u0026lt;\u0026lt;std::endl; } int main(){ std::thread thread{plus,1,1}; //第二步，定义std::thread对象，将函数作为参数 std::cout\u0026lt;\u0026lt;\u0026#34;continue running at main thread\u0026#34;\u0026lt;\u0026lt;std::endl; thread.join(); //第三步调用线程对象的join函数或者detach函数 std::cout\u0026lt;\u0026lt;\u0026#34;sub thread finished!\u0026#34;\u0026lt;\u0026lt;std::endl; } //输出 //\tcontinue running at main thread //\trunning at sub thread // a + b = 2 // sub thread finished! 难点在线程间通信，也就是解决两个问题\n线程1更新了变量v的值 线程2马上能读取到正确的变量v的值，即线程1更新的那个最新值 为了协调这两个过程，就出现了锁对象mutex和条件对象condition_variable。锁对象mutex保证变量按照正确的顺序更改。条件对象condition_variable保证更改能被其他线程监听到。\nint a,b; bool ready = false; std::mutex mux; std::condition_variable con; void plus() { std::cout \u0026lt;\u0026lt; \u0026#34;running at sub thread\u0026#34; \u0026lt;\u0026lt; std::endl; //因为我们要读取ready的最新值，所以要用锁保证读取结果的有效性 std::unique_lock\u0026lt;std::mutex\u0026gt; guard{ mux }; if (!ready) { //数据没准备好，休息一下！ con.wait(guard); } //这里就可以正确读变量a,b了 std::cout \u0026lt;\u0026lt; \u0026#34;a + b =\u0026#34; \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; std::endl; } int main() { std::thread thread{ plus}; std::cout \u0026lt;\u0026lt; \u0026#34;continue running at main thread\u0026#34; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;input a = \u0026#34;; std::cin \u0026gt;\u0026gt; a; std::cout \u0026lt;\u0026lt; \u0026#34;input b = \u0026#34;; std::cin \u0026gt;\u0026gt; b; { //数据准备好了，该通知子线程干活了，用大括号是因为想让锁因为guard的销毁即使释放，从未保证plus里面能重新获得锁 std::unique_lock\u0026lt;std::mutex\u0026gt; guard{ mux }; //更新数据 ready = true; //通知 con.notify_all(); } thread.join(); std::cout \u0026lt;\u0026lt; \u0026#34;sub thread finished!\u0026#34; \u0026lt;\u0026lt; std::endl; } 多线程另一个需要注意的问题就是死锁。死锁的前提是有两个锁\n线程1得到了锁a，还想得锁b 线程2得到了锁b，还想得锁a 然后，再加上一个前提：某一时刻，只有一个线程能拥有某个锁，就不难得出以下结论：线程a，b除非某一个放弃已得的锁，不然两个线程都会因为没得到需要的锁而一直死等，形成死锁。同时解决死锁的思路也呼之欲出：既然一个得了a，一个得了b，而锁同一时间只能被一个线程得到，那么所有线程都按先得a，再得b的顺序来就不会有锁被占用的问题了。另一个思路则可以从放弃上入手，既然都得不到，那么接下来的任务也做不了，不如直接放弃已经得到的，所以可以考虑使用timed_mutex。\n其他 #还有很多常用的库，如字符串string，时间chrono，还有在定义函数变量时常用的functional,异常exception，更多的内容可以在cplusplus找的参考。\n总结 #总的来说，标准库提供了一个展现C++语言能力的平台：帮助开发者更好更快完成开发任务的同时，还能启迪开发者实现更好的抽象和实践。如我就从标准库中学到了更规范地定义函数参数，更好的封装，以及其他好的思路。学习标准库不仅更好地掌握了语言本身，还掌握了更全面地分析问题，解决问题的方法，是值得花费一段时间学习的。 容器类是几乎所有项目都会用到的，也是比较好掌握的，主要可以从数据结构方面对照学习；智能指针则是处理指针问题的好帮手；线程相关的库是比较难掌握的，关键是要想明白使用场景和极端情况下的边界问题。很多时候边界问题可能不那么直观。如线程要求获得锁的情况就分为：锁空闲，锁被其他线程占有，锁被自己占有。不同的边界对于不同的锁，预期结果也是不同的，只有在明确场景的情况下，才能更好地理清锁的关系，从而解决好问题。 最好的学习还是在实践中主动使用。对于我，通常在遇到新问题的时候会先查查标准库有没有相应的库，有的话就是学习这个库的好时机。可以先概览库的定义和解决的问题，然后分析它提供的类，函数，对象等，再将自己的理解转换为项目中的代码，最后在实际效果中检验和修正想法，完成库的学习。\n","date":"20 July 2022","permalink":"/en/post/%E7%8E%B0%E4%BB%A3C++%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97-%E6%A0%87%E5%87%86%E5%BA%93.html","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e在[上一章](\u003ca href=\"https://www.yuque.com/docs/share/adb5b1e4-f3c6-46fd-ba4b-4dabce9b4f2a?#\" target=\"_blank\" rel=\"noreferrer\"\u003ehttps://www.yuque.com/docs/share/adb5b1e4-f3c6-46fd-ba4b-4dabce9b4f2a?#\u003c/a\u003e 《现代C++学习指南-类型系统》)我们探讨了C++的类型系统，并提出了从低到高，又从高到低的学习思路，本文就是一篇从高到低的学习指南，希望能提供一种新的视角。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"现代C++学习指南-标准库"},{"content":" In the previous post, we provided a directional guide, but what and how to learn was not developed in detail. This article will build on the previous article and focus on how to learn C++\u0026rsquo;s type system.\nBefore the start #Before we get into the type system, there is one thing we should agree on - use the modern syntax of C++ whenever possible. It is well known that many syntaxes in C++ are legal for compatibility reasons. But as new versions are released, some syntax may not be recommended or needs to be avoided. So this post also uses the recommended form of syntax (based on C++11 or above) whenever possible, which is what the title Modern C++ means.\nThere are two benefits to using modern syntax. One, modern syntax can compile faster and more robust code. Compilers evolve as languages evolve, and modern syntaxes can help compilers do better optimization to some extent. Second, modern syntaxes are often more concise, intuitive, and uniform, which helps increase readability and maintainability. With that clear, let\u0026rsquo;s get our foot in the door of modern C++.\nType system #A program is a computational tool that produces computational results based on inputs, and predefined computational methods. When the program is run, all three need to be represented in memory as appropriate values for the program to work properly, and the set of tools responsible for interpreting this is the type system. Numbers, strings, keyboard and mouse events, etc. are all data and actually exist in memory in the same form, but are treated differently when viewed through our human eyes. Numbers can be added, subtracted, multiplied, divided, and other arithmetic operations, but arithmetic operations on strings are meaningless, and keyboard and mouse values are usually just read, not calculated. It is because of these differences that the first task of a programming language is the need to define a type system that tells the computer what to do with the data in memory. In order to make programming languages as simple as possible, programming languages generally implement the type system in two steps, one for the compiler and the other for the types. The compiler part is responsible for interpreting the developer\u0026rsquo;s code into a suitable form so that it can be efficiently and accurately represented in memory. The type part defines the types that the compiler can handle, so that the developer can find the right data to accomplish the representation of inputs and outputs and the description of computational methods. The two complement and fulfill each other. The importance of types as an important representation of the type system in a programming language cannot be overstated. If you think of writing a program as building blocks, then the blocks of the program are the type system. The type system is the smallest unit that the developer can manipulate, it limits the rules of operation, but provides unlimited possibilities. c++ has a type system that is more flexible than the building blocks.\nType #:::info Types are the smallest unit of a programming language, and any sentence of code is a form of memory usage. ::: Talking about types in C++ also brings us to its three types of representation - normal types, pointers, and references. They are three different forms of memory usage and interpretation, and are the most basic forms of C++. Unlike most programming languages, C++ does not privilege built-in types, and all types can have a consistent syntax (via operator overloading) if the developer wants them to, so the following examples of types are suitable for all types. Common types are types without modifiers, such as int, long, double, etc. They are passed by value, i.e., assignments and function passes make a copy of the value. They are passed by value, which means that assignments and function passes make a copy of the value, and operations on the copied value do not affect the old value any further.\nint a=1; //old value, exists at address 1 int b=a; // new value, exists at address 2 b=2; //change new value, change address 2 // At this point a is still 1 and b becomes 2 ! So what if we need to modify the old value, there are two ways to do this, one is a pointer and the other is a reference. Pointers are the magic inside C/C++, everything is a pointer. A pointer has two aspects, on the one hand it refers to a block of memory and on the other hand it can refer to the operations that are allowed to be performed on that block of memory. The value of a pointer is a block of memory address, and by manipulating a pointer, you manipulate the block of address it points to.\nint a=1; //old value, exists at address 1 int* b=\u0026amp;a; //\u0026amp; stands for fetch address, read from right to left, fetch address of a - address 1, exist address 2 *b=2; //* is dereferencing, meaning take out the value that exists at address 2(b) and change the value at that address (address 1) to 2 // At this point a, *b becomes 2 ! References are an improved version of pointers. References avoid invalid references, but they cannot be reset and lack a certain degree of flexibility over pointers.\nint a=1; //old value, exists at address 1 int\u0026amp; b=a; //\u0026amp; appears at the position of the variable declaration, which means that the variable is a reference variable, and reference variables must be initialized at the time of declaration b=2; // you can manipulate a reference variable like a normal variable, and at the same time, operations on it will be reflected on the original object // At this point a, b becomes 2 Variable definitions #A type is just a syntactic definition, and to actually use that definition, we need to define variables in terms of types, i.e. variable definitions. C++ variable definitions are of the following form:\ntype name[{initial_value}] The key here is type. type is a combination of type and qualifier. Look at the following example:\nint a; // Ordinary integer int* b; //The type is a combination of int and *, forming an integer pointer const int* c; //reading from right to left, * is a pointer and const int is a constant integer, making up the type of pointer to a constant integer int *const d; // also read from right to left, const is constant, followed by a pointer, indicating that this pointer is a constant pointer to the leftmost int, which consists of constant pointers to integers int\u0026amp; e=a; //The type is a combination of int and \u0026amp;, forming an integer reference constexpr int f=a+e; //constexpr means that this variable needs to be evaluated at compile time and is no longer mutable. Above, basically all the forms of variable definition, the type determines the basic attributes of the variable, and the qualifier limits the scope of the variable\u0026rsquo;s use. Defining a variable follows this same procedure, first determining what type of variable we need, and secondly further determining if we need to add a qualifier to that variable, which many times is required. The following steps can be followed to determine what kind of qualifier to add:\nis a large object, consider declaring the variable as a reference type. Usually reference types are a better choice than pointer types. Large objects may need to be reset, consider declaring them as pointers. Just want a constant, add constexpr. To read only this variable, add const. Variable initialization #Variable definitions are often accompanied by initialization, which is important for local variables because the initial value of a local variable is uncertain, and using a variable without effectively initializing it can lead to uncontrollable problems. So strictly speaking, the preceding variable definition is not entirely correct. C++11 introduced a new, unified way of initializing variables, where the variable name is followed by curly braces that enclose the initialized value. This approach can be used for any variable and is called uniform initialization, as in:\nint a{9527}; // common type string b={\u0026#34;abc\u0026#34;}; //another way to write, equivalent but not recommended Student c{\u0026#34;ZhangSan\u0026#34;, \u0026#34;20220226\u0026#34;,18}; //in curly brackets are constructor parameters Of course, in addition to defining a variable by its type name, you can also combine definition and initialization into the cleanest form below:\nauto a={1}; // deduce to integer auto b=string{\u0026#34;abc\u0026#34;}; auto c=Student{\u0026#34;Zhang San\u0026#34;, \u0026#34;20220226\u0026#34;,18} Here auto means to let the compiler determine the type itself. The above is written in a way that makes full use of C++\u0026rsquo;s type derivation, which is the recommended form for many modern languages. Note, however, that = cannot be omitted when type derivation is used. Once we have initialized variables, we can use them for a variety of computational tasks.C++ implements a lot of built-in computational support for developers. C++ implements a lot of built-in computational support for the developer, such as addition, subtraction, multiplication and division of numbers, indexing of arrays, pointer manipulation, etc. There are also branching if, switch, looping while, for, etc. statements which provide us with more flexibility.\nFunctions #Variables are the smallest unit in a programming language, and as the complexity of a business increases, there are times when intermediate computations distract from the logic of the business and add complexity. In order to better organize the code, the type system adds functions to solve this problem. A function is also a type, a composite type. Its type consists of a combination of argument list and return value, which means that two functions, if they have the same argument list and return value, are equivalent from the compiler\u0026rsquo;s point of view. Of course, they are not enough, otherwise how can there be two parameter list and return value of the same function. A complete function also needs to have a function body and function name. So a function is usually of the following form:\n// Regular function form [constexpr] return value Function name (argument list) [noexcept]{ function body (math.) } // Return value in postfixed form auto function name (argument list) -\u0026gt; return value When a function does not have a body, we usually call it a function declaration. Adding a function body is a function definition.\nvoid f(int); //function declaration void fun(int value){ // function definition as represented by curly braces function body } This is the basic framework of a function, so let\u0026rsquo;s take a look at each of the parts that make it up. First of all, the simplest function name, it is actually a function of this type of a variable, the value of this variable represents a block of code starting from a certain location in the memory address. As I said earlier, the reason why there can be two parameter lists and return values are the same function, but the compiler can identify, the main credit in the function name, so the function name is also the same as the name of the variable, is a kind of identifier. Then if the reverse, the same function name, but the parameter list or return value is different, this situation has a term - function overloading. Based on the understanding that functions are composite types, it is considered overloading if only one of them is different. In addition, in C++11, there is another kind of function without a name, called a lambda expression. lambda expressions are a kind of function value that is similar to a direct quantity, like 13, \u0026lsquo;c\u0026rsquo;, which is a kind of function that is not defined ahead of time, but is defined and used directly at the caller. The parameter list is an upgrade from the previous type definitions. All of what was said earlier about variable definitions applies to it, all three forms of variable definitions, multiple variables, variable initialization, etc. However, they all have new terms. Variables with a list of parameters are called formal parameters and initialization is called default parameters. Similarly formal parameters need to be initialized when they are actually used, but the initialization comes from the caller. Formal parameters without defaults need to be supplied at the time of calling and those with defaults can be omitted.\nint plus(int a,int b=1){ //b is a default parameter return a+b; } int main(void){ int c=plus(1); // no value for b is provided, so b is initialized to 1, resulting in 2 int d=plus(2,2); //a,b are initialized to 2, resulting in 4 //int f=plus(1,2,3); //plus has only two formal parameters, i.e. two variables, so it can\u0026#39;t hold three values, so it compiles incorrectly. return 0; } Like the argument list, the return value is a variable that is returned to the caller via a return statement, so in terms of memory manipulation, it is an assignment operation.\nstd::string msg(){ std::string input; std::cin\u0026gt;\u0026gt;input; return input. } int main(void){ auto a=msg(); std::string b=msg();//the input returned by msg is copied into b return 0; } Unfortunately, C++ only supports a single return value, that is, a function call can only return a maximum of one value, if there is more than one value can only be returned in the form of a formal parameter, this way for the function call is not very friendly, so C++ proposed a new solution.\nClasses #As the complexity of the business increases again, the number of formal parameters of a function may increase, or it may be necessary to return multiple values that are then passed between several different functions. This can lead to easily misplaced data and increased learning costs for the user. To solve these problems, engineers came up with object-oriented - multiple data packaging techniques. Expressed at the language level, it is using classes to package together a set of operations and the data needed to complete this set of operations. Data as a class attribute, operation as a class method, the user through the method to operate the internal data, data no longer need to pass the user, management. This is undoubtedly for the developer is greatly simplified operation. We call this object-oriented programming, and the way to pass data between functions is called procedure-oriented programming. The underlying logic of these two ways is in fact the same, the transfer of parameters and function calls are not less, but the difference between object-oriented is that these cumbersome, error-prone work to the compiler to do, the developer only needs to do a good job in accordance with the rules of the design of the object-oriented work on it, the rest to the compiler. At this point, we have moved up one level in our type system. Classes are not only aggregates of multiple types, they are also aggregates of multiple functions, a higher level of abstraction than functions. You can see the following code comparison between procedural and object-oriented programming\nstruct Computer{ bool booted; friend std::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; os,const Computer \u0026amp; c){ os\u0026lt;\u0026lt;\u0026#34;Computing\u0026#34;; return os. } }; void boot(Computer\u0026amp; c){ c.booted=true; std::cout\u0026lt;\u0026lt;\u0026#34;Booting...\u0026#34; ; } void compute(const Computer\u0026amp; c){ if(c.booted){ std::cout\u0026lt;\u0026lt;\u0026#34;Compute with\u0026#34;\u0026lt;\u0026lt;c; } } void shutdown(Computer\u0026amp; c){ c.booted=false; std::cout\u0026lt;\u0026lt;\u0026#34;Shutdown...\u0026#34; ; } int main(void){ auto c=Computer(); boot(c). compute(c). shutdown(c). return 0; } The most significant manifestation of procedural orientation is that the developer needs to pass data between functions and maintain the data state, which in the above example is c.\nstruct Computer{ bool booted; friend std::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; os,const Computer \u0026amp; c){ os\u0026lt;\u0026lt;\u0026#34;Computing\u0026#34;; return os. } void boot(){ booted=true; std::cout\u0026lt;\u0026lt;\u0026#34;Booting...\u0026#34; ; } void compute(){ if(booted){ std::cout\u0026lt;\u0026lt;\u0026#34;Compute with\u0026#34;\u0026lt;\u0026lt;this; } } void shutdown(){ booted=false; std::cout\u0026lt;\u0026lt;\u0026#34;Shutdown...\u0026#34; ; } }; int main(void){ auto c=Computer(); c.boot(); c.compute(); c.shutdown(); return 0; } The most significant change that can be seen in object-oriented code is that methods have fewer parameters, but the data defined by the class can be accessed directly inside the method. Another change occurs on the calling side. Instead of passing data to the method, the caller calls the method with data. This is the essence of object-orientation - it is data-centric. Of course, the encapsulation function of the class is only a small part of the class function, we will cover more class knowledge later. As a beginner, we understand this step will be able to read most of the code.\nSummary #The type system is the basic component of a language, which supports the high-level functions of the whole system, and many high-level features are evolved on the basis of the type system. Therefore, learning the type system of a language is a process from low to high, and from high to low. Starting from the most basic types, we learn how to construct high-level types from the low-level types, and then stand on the height of high-level types, and examine how the high-level types are constructed from the low-level types. This up and down, high and low basically makes most of the features of the language clear. Low-level types are more oriented towards making the compiler work better, and high-level types are more oriented towards making the developer work better. C++ provides various levels of support from common types, functions, and classes, which gives the developer more freedom of choice, and of course makes it more difficult for the developer to learn. But developers don\u0026rsquo;t always need all the choices, so I think the right learning should be guided by the size of the project. Some projects, which don\u0026rsquo;t use object orientation at all, can focus on building function sets that work well. And there are projects where object orientation is a good choice, and time needs to be spent on classes. Going back to the building blocks example at the beginning, the choice of building blocks depends entirely on what we want to model, and if we don\u0026rsquo;t have the right ones, we can create our own. That\u0026rsquo;s the beauty of C++.\n","date":"26 June 2022","permalink":"/en/post/modern-c++-study-guide-type-system.html","section":"Posts","summary":"In the previous post, we provided a directional guide, but what and how to learn was not developed in detail.","title":"Modern C++ Study Guide - Type Systems"},{"content":"","date":null,"permalink":"/en/tags/study-guides/","section":"Tags","summary":"","title":"Study guides"},{"content":"Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development. Although with the support of modern tool chains, the difficulty of this work has been greatly reduced, after all, everything is difficult at the beginning, and beginners often still encounter many unpredictable problems. This article is a simple guide written based on this background. I hope it will be helpful to readers who have just started writing C/C++ libraries. At the same time, in order to reduce cognitive gaps as much as possible, this article will try to start with the simplest function and gradually add tool chains until the final function is achieved, truly knowing what is happening and why.\nTarget #The goal of this article is very simple, which is to call C/C++ functions in Android applications - receiving two integer values ​​and returning the value after adding the two. This function is tentatively named plus.\nBegin with the C++ source file #In order to start from where we are most familiar, we\u0026rsquo;ll start with the original C++ source files without the use of sophisticated tools.\nOpen any text editor you like, VS Code, Notpad++, Notepad, create a new text file and save it as math.cpp. Next, you can write code in this file.\nOur goal, as stated earlier, is to implement a plus function that takes two integer values and returns the sum of the two, so it might look like below\nint plus(int left,int right) { return left + right; } Out work is done, isn\u0026rsquo;t it simple.\nBut just having the source file is not enough, because this is just for humans, machines can\u0026rsquo;t read it. So we need the first tool - a compiler. A compiler helps us to convert what is human-readable into something that is machine-readable.\nThe compiler #The compiler is a complex project, but the two main functions are as follows\nto understand the content of the source file (human-readable) - to check for syntax errors in the source file to understand the content of the binary (machine-readable) - to generate binary machine code. Around these two main functions, the compiler needs to complete a lot of work, especially function 2. Based on this difficulty, compilers are divided into a variety of common compilers, such as VS for Windows platform, G++ for Linux platform, Apple\u0026rsquo;s Clang, and for Android, the situation is slightly different, the previous compilers are running on a specific system, compiled programs usually can only run on the corresponding system. The compiled program usually only runs on the corresponding system. Taking my current machine as an example, I\u0026rsquo;m writing C++ code on Deepin right now, but the goal is to have the code run on an Android phone, two different platforms. More pessimistically, so far, there is no compiler that will run on a phone. Does that mean we can\u0026rsquo;t run C++ code on a phone? Of course not, because there is cross-compilation.\nCross-compilation is the technique of generating code on one platform into executable objects on another. The biggest difference between cross-compilation and normal compilation is in linking. Because the general link directly to the system library to find the appropriate library files, while cross-compilation can not, because the current platform is not the final platform to run the code. So cross-compile also need to have the common libraries of the target platform. Of course, Google has prepared all these for us, called NDK.\nNDK #NDK full name is Native Development Kit, there are many tools, compilers, linkers, standard libraries, shared libraries. These are all essential parts of cross-compilation. In order to understand the convenience, we first take a look at its file structure. Take the version on my machine as an example - /home/Andy/Android/Sdk/ndk/21.4.7075529 (the default location on Windows is c:\\Users\\xxx\\AppData\\Local\\Android\\\\). Sdk\\). The NDK is stored in the Sdk directory, named ndk, and the version number is used as the root directory for that version, as in the example, the version of NDK I installed is 21.4.7075529. The example is also the value of the ANDROID_NDK environment variable. In other words, before determining the environment variable, we need to determine the version of the NDK to use, and the path value is taken to the version number directory.\nKnowing where it is stored, we next need to recognize two important directories\nbuild/cmake/, a folder that we\u0026rsquo;ll expand on later. toolchains/llvm/prebuild/linux-x86_64, the last linux-x86_64 has a different name depending on the platform, e.g. it starts with Windows on Windows platforms, but you can\u0026rsquo;t go wrong with it because it\u0026rsquo;s just one folder under the path and it\u0026rsquo;s preceded by the same one. There are compilers, linkers, libraries, headers and so on. For example, the compilers are in the bin directory in this path, and they all end in clang and clang++, like aarch64-linux-android21-clang++. aarch64 means that this compiler can generate binaries for use on arm64 architecture machines, the other equivalents are armv7a, x86_64, etc. Different platforms use matching compilers. It is the target platform that is referred to in cross-compilation.\nlinux means that we perform the compilation operation on a linux machine, which is the host platform in cross-compilation.\nandroid21 is obviously the target system version.\nclang++ means that it is a C++ compiler, and the corresponding C compiler is clang.\nAs you can see, for Android, different hosts, different instruction sets, different Android versions, all correspond to a compiler. After learning so much, it\u0026rsquo;s finally time to get excited about the human nature. Next, let\u0026rsquo;s compile the C++ file in front of us.\nCompile #Looking at the parameters via aarch64-linux-android21-clang++ --help, you\u0026rsquo;ll see that it has a lot of parameters and options, and now we just want to verify that our C++ source file doesn\u0026rsquo;t have any syntax errors, so we\u0026rsquo;ll just ignore all that complexity, and just a aarch64-linux-android21- clang++ -c math.cpp.\nAfter the command is executed, if all goes well, a math.o object file will be generated in the same directory as math.cpp, which means that our source code has no syntax errors and we can proceed to the next step of linking.\nBut before that, a quick interruption. Often our projects contain many source files, referencing some third-party libraries, and each time we compile them manually, linking is obviously inefficient and error-prone. Nowadays, when tools are mature, we should try to use mature tools and focus on our business logic, CMake is one such tool.\nCMake #CMake is a cross-platform project builder. How to understand it? When writing C++ code, sometimes you need to refer to file headers in other directories, but in the compilation stage, the compiler doesn\u0026rsquo;t know where to look for the headers, so you need a configuration to tell the compiler where to look for the headers. Furthermore, source code distributed in different directories needs to be packaged into different libraries according to certain needs. Or, if the project references third-party libraries, you need to tell the linker where to look for the libraries during the linking phase, and all of these are things that need to be configured.\nDifferent systems and different IDEs have different support for these configurations, such as Visual Studio on Windows, which needs to be configured in the project\u0026rsquo;s properties. When developers use the same tools, the problem is not so big. But once involved in the case of multi-platform, multi-IDE, collaborative development will spend a lot of time in the configuration of the CMake is to solve these problems came into being.\nCMake configuration information is written in a file called CMakeLists.txt. As I mentioned earlier, header file references, source code dependencies, library dependencies, etc., only need to be written once in CmakeLists.txt, and can be used seamlessly on all major IDEs on Windows, MacOS, and Linux platforms. For example, I created a CMake project on Visual Studio for Windows, configured the dependencies, and passed it to a coworker. When my colleague develops on MacOS, he can immediately finish compiling, packaging, testing, etc. without any modification. This is the power of CMake cross-platform - simple, efficient, flexible.\nManage project with CMake #Create a CMake project #We already have math.cpp and CMake above, so let\u0026rsquo;s combine them now.\nHow do we create a CMake project? There are three steps:\nCreate a folder In the example, let\u0026rsquo;s create a folder math.\nCreate a new CMakeLists.txt text file in the new folder. Note that the name of the file cannot be changed.\nConfigure the project information in the new CMakeLists.txt file. The simplest CMake project needs to include at least three infomation\nMinimum CMake version supported cmake_minimum_required(VERSION 3.18.1) Project name project(math) Product - The product could be executables or libraries. Since we are need a libraries on Android, so the product is a library. add_library(${PROJECT_NAME} SHARED math.cpp) After these three steps, the CMake project is built. Let\u0026rsquo;s try compiling the project with CMake in the next step.\nCompile the CMake project #Before executing the real compilation, CMake has a preparation phase, in which CMake collects the necessary information and then generates a project that meets the conditions before it can execute the compilation.\nWhat is the necessary information? CMake will collect some information by guessing in order to minimize the complexity.\nFor example, if we perform the generation operation on Windows, CMake will default to Windows as the target platform and generate the VS project by default, so compiling Windows libraries on Windows is almost zero configuration.\nCreate a new build directory in the math directory and switch the working directory to the build directory.\ncd build cmake .. After the command is executed, you will find the VS project in the build directory, and you can open it directly with VS and compile it without errors. Of course, the faster way is to compile directly with CMake.\nCompile\ncmake --build . Note that the preceding .. represents the parent directory, the math directory where the CMakeLists.txt file exists, and . represents the current directory, build. If both of these steps are executed successfully, we will be able to harvest a library file in the build directory, which may be called math.dll on Windows platforms and math.so on Linux platforms, but both are dynamic libraries, because that is what we configured in the CMakelists.txt file.\nFrom the above process, CMake\u0026rsquo;s workflow is not complicated. But we are using the default configuration, which means that the final generated library can only be used on the compiled platform. To use CMake to compile Android libraries, we need to manually tell CMake some configurations when generating the project, instead of letting CMake guess.\nCross-compilation of CMake #Where do the configuration parameters come from? #Although we do not know what is the minimum configuration to complete the cross-compilation, but we can guess.\nFirst of all, to complete the compilation of the source code, compiler and linker is indispensable, we also know that the Android platform has a special compiler and linker, so at least one configuration should be to tell CMake with which compiler and linker.\nSecondly, Android\u0026rsquo;s system version and architecture is also essential, after all, for Android development, this is very important for Android applications.\nCan you think of any other parameter, I can\u0026rsquo;t seem to think of any. However, the good news is that Google has done it for us, and that is to use CMAKE--TOOLCHAIIIN_FILE directly. This option is provided by CMake, just set the configuration file path to its value, CMake will find the target file through this path, and use the configuration inside the target file instead of its own guessing parameters. The configuration file is build/camke, one of the two important folders mentioned earlier, and our configuration file is android.toolchain.cmake under that folder.\nThe CMake of Google #android.toolchain.cmake plays the role of a wrapper that will work together to configure CMake using the parameters provided to it, and the default configuration. In fact, this file is a good source for learning about CMake, and you can learn a lot of CMake tricks. Now, let\u0026rsquo;s not learn CMake-related first, let\u0026rsquo;s see what parameters we have available. In the beginning of the file, Google will be configurable parameters are listed out\nANDROID_TOOLCHAIN ANDROID_ABI ANDROID_PLATFORM ANDROID_STL ANDROID_PIE ANDROID_CPP_FEATURES ANDROID_ALLOW_UNDEFINED_SYMBOLS ANDROID_ARM_MODE ANDROID_ARM_NEON ANDROID_DISABLE_FORMAT_STRING_CHECKS ANDROID_CCACHE These parameters are not actually CMake parameters; they are converted to real CMake parameters as the configuration file is executed. We can specify the values of these parameters to allow CMake to fulfill different build requirements. If you don\u0026rsquo;t specify any of them, the default values will be used, which may be different for different NDK versions.\nLet\u0026rsquo;s focus on the most critical ANDROID_ABI and ANDROID_PLATFORM. The first one refers to which CPU instruction set the currently built package is running on, the available values are arneabi-v7a, arn64-v8a, x86, x86_64, mips, mips64. The latter one refers to the Android version of the build package. Its value takes two forms, one is the direct android-[version] of the form [version] which is replaced with the specific system version when used, e.g., android-23, which means that the minimum supported system version is Android 23. The other form is the string latest. This value is as the word implies, use the latest.\nSo how do we know which parameter can take which values? There\u0026rsquo;s an easy way: first identify the parameter you want to see in the header of the file, then search globally and look at the set and if related statements to determine the parameter forms it supports.\nComplete cross-compilation using configuration files #With that out of the way, let\u0026rsquo;s go back to the original example. Now we have CMakelists.txt, we have math.cpp, and we have found the configuration file android.toolchin.cmake for Android. So how do you combine the three, which brings us to CMake\u0026rsquo;s parameter configuration.\nIn the previous section, we completed the configuration of the project file generation by directly using the following command\ncmake .. But it is actually possible to pass parameters, CMake\u0026rsquo;s parameters are all key-value pairs that start with -D and are separated by whitespace. And CMake\u0026rsquo;s default parameters all start with CMAKE, so most of the time the parameters are of the form -DCMAKE_XXXFor example, passing a toolchain file to CMake would look like this\ncmake -DCMAKE_TOOLCHAIN_FILE=/home/Andy/Android/Sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake The point of this parameter is to tell CMake to use the file specified after = to configure CMake\u0026rsquo;s parameters\nHowever, to complete the cross-compilation, we are missing one more option - -G. This option is required for cross-compilation. Because cross-compiling CMake does not know what form of project to generate, this option is needed to specify the type of project to generate. One type of project is the traditional Make project, which is specified as follows.\ncmake -G \u0026#34;Unix Makefiles\u0026#34; As you can see, this form is based on the Unix Make project, which uses make as the build tool, so after specifying this form, you also need to specify the path to make for the project to be compiled successfully. The other Google-recommended way is Ninja, which is simpler because you don\u0026rsquo;t need to specify the path to Ninja separately, and it is installed in the same directory as CMake by default, so you can reduce the number of passing parameters. Ninja is also a build tool, but focuses on speed, so we\u0026rsquo;ll use Ninja this time. It\u0026rsquo;s specified like this\ncmake -GNinja Combining the above two parameters gives you the final compilation command\ncmake -GNinja -DCMAKE_TOOLCHAIN_FILE=/home/Andy/Android/Sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake .. Generate a project and then compile it\ncmake --build . We\u0026rsquo;ve got a dynamic library that will eventually run on Android. The dynamic library compiled with my version of the NDK supports Android version 21, and the instruction set is armeabi-v7a. Of course, based on the previous description, we can pass the desired parameters as we did earlier with the toolchain file, e.g., to build the x86 library with the latest version of Android, you can write something like this\ncmake -GNinja -DCMAKE_TOOLCHAIN_FILE=/home/Andy/Android/Sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=latest -DANDROID_ABI=x86 .. This gives us the idea that if some third-party libraries don\u0026rsquo;t provide a compilation guide, but are managed by CMake, we can just apply the above formula to compile the third-party libraries.\nJNI #With the help of CMake, we have got the libmath.so dynamic library, but this library still can\u0026rsquo;t be used directly by Android apps, because Android apps are developed in Java (Kotlin) language, and they are all JVM languages, the code is running on the JVM. To use the library, you also need to find a way to get the library loaded into the JVM and then you can access it. It happens that the JVM really does have this capability, it is JNI.\nJNI basic concepts #JNI can provide bi-directional access from Java to C/C++, that is, you can access C/C++ methods or data in Java code, and vice versa, the same support, which is the process of the JVM can not be ignored. So to understand JNI technology, we need to think in terms of JVM.\nJVM is like a goods distribution center, no matter where the goods need to come to this distribution center, and then through it to distribute the goods to the destination. The goods here can be Java methods or C/C++ functions. But unlike ordinary courier is that the goods here do not know where their destination is, you need to find the distribution center itself. Then find the basis from where it is, that is, how to ensure that the distribution center to find the results of the uniqueness of it, the simplest way is, of course, the goods themselves to identify their own, and to ensure its uniqueness.\nObviously this is a good problem for Java, which has layers of mechanisms to guarantee uniqueness.\nthe package name guarantees the uniqueness of the class name; the class name can guarantee the uniqueness of the class under the same package name; 3. the method name can guarantee the uniqueness under the same class; and method names can be used to guarantee uniqueness under the same class. 4; method overloading can be used to determine the uniqueness of the class by the type and number of parameters. For C/C++, there is no package name and class name, so can we determine the uniqueness with method name and method parameters? The answer is yes, as long as we use the package name and class name as a kind of qualification.\nThere are two ways to add qualifications, one is simple and crude, directly to the package name class name as part of the function name, so that the JVM does not have to look at other things, directly crude package name, class name, function name and parameters of these correspond to determine the corresponding method on the other end. This method is called static registration. In fact, it\u0026rsquo;s very similar to broadcasting in Android: static registration for broadcasting is just brute-force writing in the AndroidManifest file, so you don\u0026rsquo;t have to configure it in the code, and it takes effect as soon as it\u0026rsquo;s written. In contrast to static registration, there must be a dynamic registration method. Dynamic registration is writing code that tells the JVM what functions correspond to each other, rather than having it look them up when the function is called. Obviously the advantage of this approach is that the call is a little faster, after all, we only need to register once, you can in subsequent calls directly access to the counterpart, no longer need to find the operation. However, the same and Android broadcast dynamic registration, dynamic registration is much more cumbersome, and dynamic registration should also pay attention to grasp the timing of registration, otherwise it is easy to cause the call to fail. We continue to libmath.so as an example.\nUse local library on the Java #Accessing C/C++ functions on the Java side is simple, in three steps:\nJava calls System.loadLibrary() method to load the library.\nSystem.loadlibrary(\u0026#34;math.so\u0026#34;); It\u0026rsquo;s worth noting here that CMake generates a dynamic library called libmath.so, but here it\u0026rsquo;s just math.so, which means that you don\u0026rsquo;t need to pass the lib prefix. After this step, the JVM knows that there is a plus function.\nJava declares a native method that corresponds to a C++ function. Correspondence means that the parameter list and return value should be the same, but the method name can be different.\npublic native int nativePlus(int left,int right); Often, it is customary to prefix native methods with native.\nCall this native method directly where needed. Calling the method is the same as a normal Java method, passing matching parameters and receiving the return value with the matching type.\nCombining these steps into a single class looks like this\npackage hongui.me; import android.os.Bundle; import androidx.annotation.Nullable; import androidx.appcompat.app.AppCompatActivity; import hongui.me.databinding.ActivityMainBinding; public class MainActivity extends AppCompatActivity { static { System.loadLibrary(\u0026#34;me\u0026#34;); } ActivityMainBinding binding; private native int nativePlus(int left,int right); @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityMainBinding.inflate(getLayoutInflater()); setContentView(binding.getRoot()); // Example of a call to a native method binding.sampleText.setText(\u0026#34;1 + 1 = \u0026#34;+nativePlus(1,1)); } } Introducing JNI on the C/C++ side #JNI is actually for C/C++ is a layer of adaptation layer, in this layer mainly do the work of function conversion, do not do the implementation of specific functions, so, in general, we will create a new source file, used to deal with the JNI layer of the problem, and the JNI layer of the most important problem is, of course, the method of registration problems mentioned earlier.\nStatic registration #The basic idea of static registration is to write a C/C++ function signature corresponding to an existing Java native method, specifically in four steps.\nStart by writing the exact same function signature as the Java native function int nativePlus(int left,int right) Add the package name and class name in front of the function name. Because package names are split in Java with . split, whereas in C/C++ dots are usually used as function calls, to avoid compilation errors, you need to replace . is replaced with _. hongui_me_MainActivity_nativePlus(int left,int right) Converting function parameters. As mentioned earlier all operations are JVM based, and in Java these are natural, but in C/C++ there is no JVM environment, and providing a JVM environment would have to be in the form of adding parameters. In order to do this, any JNI function has to add two parameters at the beginning of the parameter list. The smallest environment inside Java is a thread, so the first parameter is the thread environment object JNIEnv, which represents the caller\u0026rsquo;s thread environment when calling this function, and this object is the only way for C/C++ to access Java. The second is the calling object. Since you can\u0026rsquo;t call methods directly in Java, you need to call them through a class name or a class, the second argument represents that object or class, which is of type jobjet. Starting from the third parameter, the parameter list corresponds to the Java side, but only just, after all, there are some types that are not available in the C/C++ side, which is the type system in JNI, for our current example the int value in Java corresponds to the jint value in JNI, so the last two parameters are of type jint. This is a critical step, as failure to convert any of the parameters can cause the program to crash. hongui_me_MainActivity_nativePlus( JNIEnv* env, jobject /* this */, jint left, jint right) Add the necessary prefixes. This step can be easily overlooked because this part doesn\u0026rsquo;t come so naturally. First we have to add a prefix Java to the function name, which now looks like this Java_hongui_me_MainActivity_nativePlus. Secondly, you need to add JNIEXPORT and JNICALL at the end of the return value, here the return value is jint, so after adding these two macros it looks like this JNIEXPORT jint JNICALL. Finally, you have to add the extern \u0026quot;C\u0026quot; compatibility directive at the beginning. As to why this step is added, interested readers can go to the details, the simple summary is that this is the JNI specification. After these four steps, the final version of C/C++ function signature looks like this\n#include \u0026#34;math.h\u0026#34; extern \u0026#34;C\u0026#34; JNIEXPORT jint JNICALL Java_hongui_me_MainActivity_nativePlus( JNIEnv* env, jobject /* this */, jint left, jint right){ return plus(left,right); } Notice that here I changed the previous math.cpp to math.h and called the function in the JNI adaptation file (filename is native_jni.cpp). So now there are two source files, need to update CMakeList.txt a bit.\ncmake_minimum_required(VERSION 3.18。1) project(math) add_library(${PROJECT_NAME} SHARED native_jni.cpp) You can see that we only change the last line of the filename, because CMakeLists.txt is currently located in the directory is also include lookup directory, so do not need to give it a separate value, if you need to add other locations of the header file can be used to include_directories(dir) to add.\nNow use CMake to recompile and generate dynamic libraries, and this time Java will run directly without errors.\nDynamic registration #As mentioned earlier dynamic registration needs to pay attention to the timing of registration, so what is considered a good time? In the previous section of Java\u0026rsquo;s use of local libraries, we know that in order to use the library, you must first be loaded, loaded after the success of the JNI methods can be called. Then dynamic registration must occur after loading, before use. JNI is very humane to think of this, in the library after the completion of loading will immediately call jint JNI_OnLoad (JavaVM *vm, void *reserved) function, this method also provides a key JavaVM object, it is simply the best entry point to the dynamic registration of the It\u0026rsquo;s simply the best entry point for dynamic registration. Having determined the timing of the registration, let\u0026rsquo;s now do it in practice. Note: Dynamic registration and static registration are both ways of implementing JNI functions on the C/C++ side, and there is generally only one registration method for the same function. So, the next steps are parallel to static registration, not sequential.\nDynamic registration in six steps\nCreate a new native_jni.cpp file and add the implementation of the JNI_OnLoad() function. extern \u0026#34;C\u0026#34; JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) { return JNI_VERSION_1_6; } This is the standard form and implementation of this function, the previous string are the standard form of JNI function, the key point is the function name and parameters and return value. In order for this function to be called automatically after the library is loaded, the function name must be this, and the parameter form can not be changed, and the final return value to tell the JVM the current JNI version. In other words, these are templates, just copy.\nGet JNIEnv object As mentioned earlier, all JNI-related operations are done through the JNIEnv object, but now we only have a JavaVM object, so obviously the secret is in the JavaVM. The secret lies in the JavaVM. You can get the JNIEnv object through its GetEnv method.\nJNIEnv *env = nullptr; vm-\u0026gt;GetEnv(env, JNI_VERSION_1_6); Find the target class As I said earlier, both dynamic and static registration are most qualified by package and class names, just not in the same way. So for dynamic registration we still have to use the package name and class name, but this time in a different form. Static registration uses _ instead of . , this time we\u0026rsquo;re going to use / instead of . . So we end up with a class of the form hongui/me/MainActivity. This is a string form, so how do we convert it to a jclass type in JNI, which is where JNIEnv from step 2 comes in.\njclass cls=env-\u0026gt;FindClass(\u0026#34;hongui/me/MainActivity\u0026#34;); This cls object is a one-to-one correspondence with the MainActivity in Java. With the class object the next step is of course the methods.\nGenerate an array of JNI function objects. Because dynamic registration can register multiple methods of a class at the same time, the registration parameters are in the form of an array, and the type of the array is JNINativeMethod. The purpose of this type is to associate the native method on the Java side with the JNI method, how it is done, look at its structure\ntypedef struct { const char* name; const char* signature; void* fnPtr; } JNINativeMethod; name corresponds to the name of the native method on the Java side, so the value should be nativePlus. signature corresponds to the parameter list of the native method plus the signature of the function type. What is a signature? It is a type shorthand. There are eight basic types in Java, as well as methods, objects, classes. Arrays and so on, all of these things have a set of corresponding string forms, as if it were a hash table, where the keys are string representations of the types, and the values are the corresponding Java types. For example, jint is a true JNI type, its type signature is I, which is the initial capitalization of int.\nFunctions also have their own type signature (paramType)returnType Here both paramType and returnType need to be JNI type signatures, with no separator between types.\nIn summary, the type signature of nativePlus is (II)I. Two integer arguments return another integer.\nfnPtr is, as its name suggests, a function pointer, and the value is our real nativePlus implementation (which we haven\u0026rsquo;t implemented yet here, so let\u0026rsquo;s assume it\u0026rsquo;s jni_plus for now). To summarize, the final array of function objects should look like this\nJNINativeMethod methods[] = { {\u0026#34;nativePlus\u0026#34;,\u0026#34;(II)I\u0026#34;,reinterpret_cast\u0026lt;void *\u0026gt;(jni_plus)} }; Registration Now that you have the jclass object representing the class, and the JNINativeMethod array representing the methods, and the JNIEnv object, combine them to complete the registration\nenv-\u0026gt;RegisterNatives(cls,methods,sizeof(methods)/sizeof(methods[0])); The third parameter represents the number of methods. We use the sizeof operation to get the size of all the methods, and then we use sizeof to get the size of the first element to get the number of methods. Of course, it\u0026rsquo;s fine to just manually fill in 1 here.\nImplementing JNI Functions In step 4, we used a jni_plus to represent the native implementation of nativePlus, but this function hasn\u0026rsquo;t actually been created yet, so we need to define it in the source file. Now the name of the function can be whatever you want, it doesn\u0026rsquo;t have to be as long as the static registration, just keep the final function name the same as the one used in the registration. However, the prefix extern \u0026quot;C\u0026quot; should be added here, to avoid the compiler to do something special with the function name. The argument list is identical to the static registration. So, our final function implementation is as follows.\n#include \u0026#34;math.h\u0026#34; extern \u0026#34;C\u0026#34; jint jni_plus( JNIEnv* env, jobject /* this */, jint left, jint right){ return plus(left,right); } Well, the implementation of dynamic registration is now complete, and after CMake compiles it, you\u0026rsquo;ll see that the result is exactly the same as static registration. So it\u0026rsquo;s up to you to decide what you want and how you want to do it. When you need to call the native method a lot, I think dynamic registration is an advantage, but if you call it very rarely, you can just use static registration, and the lookup consumption is completely negligible.\nOne more thing #I mentioned earlier that CMake is a master at managing C/C++ projects, but for Android development, Gradle is the way to go. Google realizes this too, so the gradle plugin provides a silky smooth configuration for CMake and Gradle to work seamlessly together directly. Under the android build block, you can directly configure the path and version information of CMakeLists.txt.\nexternalNativeBuild { cmake { path file(\u0026#39;src/main/cpp/CMakeLists.txt\u0026#39;) version \u0026#39;3.20.5\u0026#39; } } This way, if you change your C/C++ code or Java code, you can just click run and gradle will compile the libraries and copy them to the final directory, so you don\u0026rsquo;t need to compile and copy the libraries manually anymore. Of course, if you are not satisfied with the default behavior, you can configure the default behavior via defaultConfig, which looks like this\nandroid { compileSdkVersion 29 defaultConfig { minSdkVersion 21 targetSdkVersion 29 testInstrumentationRunner \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34; consumerProguardFiles \u0026#39;consumer-rules.pro\u0026#39; externalNativeBuild { cmake { cppFlags += \u0026#34;-std=c++1z\u0026#34; arguments \u0026#39;-DANDROID_STL=c++_shared\u0026#39; abiFilters \u0026#39;armeabi-v7a\u0026#39;, \u0026#39;arm64-v8a\u0026#39; } } } } Here, cppFlags specifies C++-related arguments, and there\u0026rsquo;s a corresponding cFlags that specifies C-related arguments. arguments is to specify the compilation parameters of CMake, the last one is familiar with the library will eventually be compiled to generate a few architectural packages, we are here just to generate two.\nWith these configurations, Android Studio development NDK is exactly like the development of Java, there are intelligent prompts, can be compiled instantly, run instantly, enjoy the silky smooth.\nSumary #NDK development should actually be divided into two parts, C++ development and JNI development. C++ development is exactly the same as C++ development on PC, you can use standard libraries, you can refer to third-party libraries, with the expansion of the project scale, CMake was introduced to manage the project, which has obvious advantages for cross-platform projects, and can also be seamlessly integrated into Gradle. JNI development is more concerned about the correspondence between the C/C++ side and the Java side, each native method on the Java side should have a corresponding C/C++ function to correspond to it, JNI provides JNI provides both static registration and dynamic registration to accomplish this work, but the core is to use the package name, class name, function name, and parameter list to determine the uniqueness. Static registration reflects the package name and class name in the function name, while dynamic registration uses the class object, local method object, and JNIENV registration method to achieve uniqueness. NDK is the big boss behind, it provides compiler, linker and other tools to accomplish cross-compilation, and some system libraries, such as log, z, opengl and so on for us to use directly.\n","date":"6 March 2022","permalink":"/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html","section":"Posts","summary":"Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development.","title":"Introduction to Android NDK-basic concepts"},{"content":"","date":null,"permalink":"/en/tags/jni/","section":"Tags","summary":"","title":"JNI"},{"content":"","date":null,"permalink":"/en/tags/ndk/","section":"Tags","summary":"","title":"NDK"},{"content":"","date":null,"permalink":"/en/categories/ndk/","section":"Categories","summary":"","title":"NDK"},{"content":"","date":null,"permalink":"/en/tags/cmake/","section":"Tags","summary":"","title":"CMake"},{"content":"Preface #CMake is a build tool, through which you can easily create cross-platform projects. It is usually used to build a project in two steps: generating a project file from the source code, and building the target product (which may be a dynamic library, a static library, or an executable program) from the project file. One of the main advantages of using CMake is that in the multi-platform or multi-people collaborative projects, developers can make their own preferences to make the choice of IDE, not subject to the influence of other people\u0026rsquo;s project configuration, it is a bit like a cross-platform IDE, through which the configuration of the relevant settings, you can be in multiple platforms seamlessly, improve development efficiency.\nSimplest CMake project #Project setup #A project managed with CMake will usually contain a CMakeLists.txt file in the project root directory, but of course subdirectories may also be present, which we\u0026rsquo;ll talk about later. Let\u0026rsquo;s start with the simplest project. Here is an example of the simplest project:\nCMakeProject | CMakeLists.txt | main.cpp This is the complete runnable minimal project. In order, let\u0026rsquo;s look at what\u0026rsquo;s in the file\nCMakeLists.txt\n# Set the version number cmake_minimum_required(VERSION 3.10) # Set the project name project(CMakeProject) # Setting up product and source code associations add_executable(${CMAKE_PROJECT_NAME} main.cpp) Description:\nCommands in CMake are not case-sensitive Comments beginning with `#' Referencing variable syntax ${variable name} So there are really only three lines of valid content in the document.\ncmake_minimum_required(VERSION 3.10) sets the minimum version supported by CMake. VERSION is the parameter name, followed by the version number. Note that the parameter name and parameters are separated by whitespace, not commas, or you will get an error. project(CMakeProject) CMake string can be with or without quotes, the effect is the same, this line is configured with the project name, such as the generation of Visual Studio project name is based on this name. add_executable(${CMAKE_PROJECT_NAME} main.cpp) is the real management of the source code and the target product of the place, here we use the reference variable writing, and the file does not define the variable, that this variable exists in CMake, in CMake there are a lot of predefined variables, we can be directly referenced in this way, the above writing is the name of the project is set to the product of the name, of course, you can also fill in the string directly, to take another name is fine. The latter main.cpp is used to generate the source path of the product, which is the most flexible part of CMake. This is the most flexible part of CMake. The source path can be various, it can be found out, written directly, relative path, absolute path, etc. If you have more than one source code, you can use it. ** If you have more than one source code, you can separate them with blanks and write them in order. In the configuration file above, we configured its source file as main.cpp, through which we want to generate an executable program with the same simple content:. #include \u0026lt;iostream\u0026gt; int main() { std::cout\u0026lt;\u0026lt;\u0026#34;hello CMake\u0026#34;\u0026lt;\u0026lt;std::endl; return 0; } Project compilation and execution #Now that the preparations are done, we\u0026rsquo;re going to use CMake to generate the executable.\nThe first step is of course to install CMake la, this is the download address !Download, according to their own platform to choose to download can be installed after the completion of the need to add it to the environment variables, so that we can easily use anywhere. After installing CMake, open the command line tool and go to the root directory of the project you just created, i.e. to the directory where CMakeLists.txt and main.cpp are stored, and prepare to generate the project in the next step.\nUsually in order not to affect and pollute the current working environment, we will choose to create a new directory to store the generated project files, the following I mainly Windows platform as the main platform to explain, other platforms are basically the same.\nmkdir build # Create a folder to store the project files; cd build # Switch the cmake working directory. cmake ... # Generate project files; After the execution of these three steps, we can see in the build folder has been generated inside a Visual Studio project, we can directly use Visual Studio to open the project, according to our habits to perform compilation and debugging. Of course, if you want to generate the fastest executable, I still recommend using CMake.\nTo perform a build with CMake, simply build on the previous step (i.e., you\u0026rsquo;ve already successfully performed the three steps above) by executing another command cmake --build . and you\u0026rsquo;re done. Remember to include the third period, which means that CMake builds in the current working directory. If everything went well in the above four steps, then we can see the executable file named after the first parameter of add_executable in the build/debug directory (in this case CMakeProject.exe), and we can execute it by double-clicking or dragging it to the command line.\nExtension the project #In the previous example, to generate the project file, we used two commands, in fact, here it can be done directly with one command - cmake build -S . -B build. The meaning of this command is to use the current path as the working path and the build directory as the build directory to generate the project file, that is, we don\u0026rsquo;t need to create the build folder manually. The -S parameter configures the source path and -B configures the build path.\nIn addition, since CMake does not have a cleanup method, every time we change CMake\u0026rsquo;s configuration (i.e., add or remove code from CMakeLists.txt) and need to regenerate the project file, we need to manually clean up the generated directory to make sure that it\u0026rsquo;s empty; if we don\u0026rsquo;t do this, the project may fail to be generated or the new configuration may not work. If you only change the source code, you don\u0026rsquo;t need to regenerate the project, just do the fourth step. Although the above operation is simple enough, but considering the long-term modification and validation needs, it is still too cumbersome and boring, especially to repeatedly switch the working directory, which is still rather annoying. So I recommend using batch processing to complete these operations. Combining the steps of cleaning up the generated directory and switching working directories, the final batch file may look like this\n@echo off rd /s /q build mkdir build cd build cmake ... cmake --build . cd debug CMakeProject cd ... /... Explain in order.\nThe first line turns off the command line\u0026rsquo;s echo, because we don\u0026rsquo;t want its echo to interfere with CMake\u0026rsquo;s message output in a way that causes unnecessary confusion, and also because usually we only care if it ends up doing its job rather than looking at what it\u0026rsquo;s doing.\nThe second line uses the Windows command for deleting folders (rmdir on Linux and MacOS), /s is to configure it to clear all the contents of the folder, including subfolders, without which the command will fail, and /q is to allow the command to execute the deletion directly without requiring us to manually confirm it, which is a very important parameter, as we would need to confirm the deletion of the folders one by one, completely defeating the purpose of automation. This parameter is very important, otherwise we need to confirm the deletion one by one, which completely defeats the purpose of automation. Then the next four sentences are what we talked about above, without further ado.\nComing all the way to the penultimate sentence, here I\u0026rsquo;ve written the name of the executable directly (you need to replace it with your own), in order to run the executable directly after the compilation is complete, which is useful for some applications that generate files.\nAt the end of the execution, then cut the directory back to the root directory of the project, this is the role of the last line, because we compile again has switched the directory to the generated directory, and the compiled executable file is in the generated directory of the subdirectory, so back to the root directory, we need to fall back twice, this is to ensure that the next time we can triumph in the execution of the batch processing key.\nSave the above as a file ending in bat, and then next time you can just type the bat file name at the command line to finish generating and building at once, it\u0026rsquo;s just awesome. This is all we need to know about CMake projects. Of course the actual project is far more complex than this, next I will use the pitfalls I have stepped on as a basis to increase the complexity of the project one by one, and slowly develop an understanding of CMake\u0026rsquo;s workflow.\nMulti-source projects #Personal insights #Before I start, let me talk about my understanding of the CMake project or CMakeLists.txt file. We can\u0026rsquo;t understand a configuration in isolation, we need to categorize the commands and even distill its core working pattern. I am using the compilation and linking of c++ files as a clue to sort it out. We all know that for a c++ source file to generate executable code, it needs three steps\nPreprocessor processing, copying the contents of header files to source files, macro replacement, etc; The compiler compiles the source files into .o object files; The linker takes .o files and other libraries as input and links to generate executables. It is much easier to understand CMake along these lines. If CMake reports an error, we can use the information to find out which phase of CMake is causing the problem, and then quickly find a solution. In addition, we can also use this information to categorize the CMake configuration, my own understanding of the rough categorization is as follows.\nConfigure CMake basic information: cmake_minimum_required; Source code management: file, aux_source_directory; Library-managed: find_libraray; Header file management: include_directories; For linkbase management: link_directories; Sub-project management: add_subdirectory; For generator management: add_executable, add_library; Of course, these are only a very small part of the picture, but they provide a better direction for understanding and searching for ideas to solve the problem.\nCMake manages subdirectories #Many times we introduce third-party packages to reduce duplicate coding efforts, and usually such code we need to put in other directories, so I created a new subdirectory to simulate the stored third-party code. For this case, we have two forms of inclusion - sub-modules and sub-directories.\nLet\u0026rsquo;s start with the simpler subdirectories. A subdirectory means that the third-party code is treated as part of our code and is merged and compiled together, in a way that makes our project look more compact. For example, the following project structure\nCMakeProject | auto.bat | CMakeLists.txt //Modify | main.cpp //modify | \\---3rd //Added lib.h I created a new subfolder to simulate the third party code, now let\u0026rsquo;s introduce it into main.cpp, compile it, and we\u0026rsquo;ll see that an error is reported, with the message fatal error C1083: Unable to open include file: \u0026quot;lib.h\u0026quot;: No such file or directory, which is normal. Combine this with the example I gave above. This error message is related to header files. Looking at the CMake documentation, I found out that CMake has an include_directories directive, which means to add the directory of the file header in order for CMake to find the header files. So I added include_directories(3rd) to the CMakeLists.txt file and ran the compile again and the project ran correctly. Take a look at the main.cpp at this point.\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;lib.h\u0026gt; int main() { int a=1,b=1; std::cout\u0026lt;\u0026lt;\u0026#34;hello CMake\u0026#34;\u0026lt;\u0026lt;std::endl; std::cout\u0026lt;\u0026lt;\u0026#34;a + b = \u0026#34;\u0026lt;\u0026lt;sum(a,b)\u0026lt;\u0026lt;std::endl; return 0; } Note: There is a one-to-one correspondence between include_directories and include in the cpp, i.e., if the directory configured in include_directories is . (the current directory, CMake does not add the current directory to the include path), then the include of the corresponding cpp should be written in the form of 3rd/lib.h, which simply means that include_directories is set to the root of the include directory. The other case is submodules.\nCMake management submodule #Submodule means that the module can be compiled separately and provided separately for other libraries to use, instead of being symbiotic with the main project, which applies to the case where the coupling with the main module is not too big. In order to satisfy this condition, we modify the directory structure to the following one\nCMakeProject | auto.bat | CMakeLists.txt //Modify | main.cpp | \\-3rd CMakeLists.txt //added lib.cpp //added lib.h //modify I changed the functions in lib.h to declarations, and the implementation is in the lib.cpp file. The biggest change was the creation of a new CMakeLists.txt file in the 3rd directory, which manages all the source files in the 3rd directory in a unified way (in case there are a lot of files, this is a simulation), and the use of add_library to package the 3rd directory into sub-modules.\nproject(sum) add_library(${PROJECT_NAME} lib.cpp) add_library can also specify the build type between the name and the source code, the default is STATIC, which is a static library, if you want to build a dynamic library you need to manually specify SHARED (add_library(${PROJECT_NAME} SHARED lib.cpp)).\nThe important changes come from CMakeLists.txt in the main directory.\n# Set the version number cmake_minimum_required(VERSION 3.10) # Set the project name project(CMakeProject) # Specify 3rd as the lookup directory for include include_directories(3rd) # Submodules add_subdirectory(3rd) # Setting up product and source code associations add_executable(${PROJECT_NAME} main.cpp) target_link_libraries(${PROJECT_NAME} sum) Added add_subdirectory, which is used to compile the source code from a specified directory as a module, provided there is a CMakeLists.txt file in that directory. Another change is the addition of target_link_libraries, which is used to link submodules into the main module; without it, linking would result in an error error LNK2019: unresolved external symbol. The name of the module needs to be the same as the first parameter of add_library in the submodule.\nCross-compilation #While the complexity of the project in the previous example was shown in the multiple directories and source code, the main complexity of the project in the process of cross-compiling with CMake is shown in the environment configuration. Although CMake can be used to cross-compile with little or no modification to CMakeLists.txt, newcomers are often overwhelmed by unfamiliar configurations and try to find an easy way to configure them with a single click. It is true that there is no such shortcut for CMake, but once we understand the essence of ** cross-compilation is the process of configuring property values correctly. However, once we understand that cross-compiling is the process of correctly configuring property values, the problem becomes clear. So, the questions above become familiar - what properties need to be configured, what are the appropriate values for those properties, how are those values passed to CMake, etc., and that\u0026rsquo;s what cross-compilation is all about. As mentioned before, CMake has a lot of preset variables, and we need to find some of these preset variables, set some values, and then let CMake do its job according to these configurations, and that\u0026rsquo;s what we need to do next. Below I will illustrate this process with an example of cross-compiling Android for Windows.\nPrepare #On Windows platform, Visual Studio will be used as the compiler for C, C++ by default, which may report errors for compiling libraries for Android. So you need to use -G \u0026quot;Unix Makefiles\u0026quot; to change this behavior when executing cmake command. But that\u0026rsquo;s not enough, because CMake compilation is required to specify the compiler. The C,C++ compiler on Android is usually provided in the form of NDK, so we need to download the NDK, which provides us with two tools at the same time, one is the compiler, and the other one is android.toolchain.cmake, which is also the file composed of CMake commands, which specifies a lot of preset values for cross-compilation, which can greatly simplify the compilation process. This is also a CMake file, which specifies a lot of presets for cross-compilation, which can greatly reduce our work.\nWrite compilation scripts #As mentioned earlier, cross-compiling is all about changing the CMake preset, and there are two ways to change this preset that we\u0026rsquo;re going to use in combination. One is through the android.toolchain.cmake file provided by the NDK. The android.toolchain.cmake file sets most of the values, but it is also very flexible and has a lot of room for configuration. Therefore, depending on the user\u0026rsquo;s needs, we also need to pass some values dynamically when executing CMake commands in order for CMake to do its job correctly. This is another way - options. Passing options will start with -D followed by some CMake predefined variable Since there are a lot of options and most of them are complex, it\u0026rsquo;s better to document and modify them through script files. Below are just a few of the options that need to be specified to compile Android code on the Windows platform, and I\u0026rsquo;ll go over the necessary configurations one by one.\n-DCMAKE_SYSTEM_NAME=Android This configuration tells CMake that it needs to generate libraries for the Android platform, i.e., perform cross-compilation. The -DANDROID_ABI=x86 configuration tells CMake to generate libraries for the applicable architectural platforms. Readers familiar with Android development should not be unfamiliar with the supported values will change according to the changes in the NDK, such as the early armeabi has been removed in the NDK r17, now there are four mainstream armeabi-v7a, arm64-v8a, x86, x86_64. Just replace the values as needed. -DANDROID_PLATFORM=android-28, this value is not really necessary as there are preset values, but it is necessary to specify one for controllability. It is used to determine the minimum system version supported by the library. -DCMAKE_TOOLCHAIN_FILE=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/build/cmake/android.toolchain.cmake, which is the above mentioned preset file. Note that there are multiple files with this name in the NDK, and if you specify them incorrectly, you may get CMake errors, so my experience has been to change the version number (C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669) and the paths in front of it, and leave the paths behind it unchanged. The latter stays the same. -DCMAKE_MAKE_PROGRAM=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/prebuilt/windows-x86_64/bin/make The last argument specifies the path to the make program path, since we are specifying the code that generates the make project and Windows usually does not have a make executable, we need to let CMake find the make file in order to complete the compilation. My experience here is also to keep the later unchanged, modify the earlier, and keep the version consistent to avoid bugs. -DCMAKE_BUILD_TYPE=Release to specify the build type, which should be common enough. At this point all the configurations for cross compiling Android libraries for Windows have been explained. Let\u0026rsquo;s have a look at its complete example\n@echo off rd /s /q build mkdir build cd build cmake -G \u0026#34;Unix Makefiles\u0026#34; ^ -DCMAKE_TOOLCHAIN_FILE=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/build/cmake/android.toolchain.cmake ^ -DCMAKE_MAKE_PROGRAM=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/prebuilt/windows-x86_64/bin/make ^ -DANDROID_PLATFORM=android-28 ^ -DCMAKE_SYSTEM_NAME=Android ^ -DANDROID_ABI=x86 ^ -DCMAKE_BUILD_TYPE=Release ^ ... /3rd cmake --build . As you can see from the above, these options are all followed by a ^ symbol, which is not part of cmake, it is just written this way for our reading convenience, this is the command line break used for batch processing on Windows platform, its function is to tell the command parser that the command is not yet finished, and continue to be parsed down the line, this function is equivalent to \\ on Linux,MacOS This function corresponds to \\ on Linux and MacOS. Now that you have this configuration, how do you use it? It\u0026rsquo;s quite easy, just store these commands in the android.bat file, switch to the current directory in CMD, execute this file and you\u0026rsquo;ll find the static library file named libsum.a in the build directory. Next, let\u0026rsquo;s try to run in the emulator with this library file.\nUsing CMake in an Android project #In the Android platform, CMake is also used to manage jni projects, along with Gradle to complete the build. The biggest difference between this and a normal CMake project is that we usually need to reference multiple Android related libraries such as log, android, etc. These libraries are usually provided by NDK. These libraries are usually provided by the NDK, and we can just follow the default CMakeLists.txt file.\nDirectory structure #Next, for descriptive purposes, let\u0026rsquo;s take a look at the current directory structure (to avoid confusion, only the more representative files are listed here)\nCMakeProject │ android.bat │ CMakeLists.txt │ main.cpp │ ├óΓé¼╦£3rd │ CMakeLists.txt │ lib.cpp │ lib.h │ └─Android │ build.gradle │ ├─app │ │ build.gradle │ │ │ ├─libs │ └─src │ ├─main │ │ │ AndroidManifest.xml │ │ │ │ │ ├─cpp │ │ │ CMakeLists.txt │ │ │ native-lib.cpp │ │ │ │ │ ├─java │ │ └─me │ │ └─hongui │ │ └─cmakesum │ │ │ MainActivity.kt │ │ │ │ │ ├─jniLibs │ │ └─x86 │ │ │ libsum.a A new Android subdirectory has been created under the root of the original directory, which is an Android C++ project, so it has an extra cpp directory compared to other normal Android projects, and the main modifications we\u0026rsquo;ll make later on happen in that directory.\nThe original root directory, in order not to add complexity, exists only as a function of generating static libraries, so there are no modifications compared to the example above.\nBuild static libraries #First, let\u0026rsquo;s go back to the root directory. Use the android.bat batch in the root directory to generate static libraries that are available on Android, you can also modify the value of the -DANDROID_ABI option in the android.bat file to generate static libraries for other architectures, but this needs to correspond to the directories in the jniLibs directory, otherwise the link may fail. For example, the libsum.a file I generated is for the x86 architecture. Then you need to create a new x86 directory in the jniLibs directory, and then put libsum.a into that directory. This concludes the build of the static library.\nUsing static libraries #After putting the static libraries in place, we need to configure the build.gradle in the app directory and the CMakeLists.txt file in the cpp directory to complete the introduction of the static libraries.\nConfiguring Gradle #First, let\u0026rsquo;s talk about build.gradle, which is mainly concerned with modifying the ABI, because if you don\u0026rsquo;t specify it, the ABI generated by Gradle by default may not find the corresponding static library file to link to, which may lead to linking failure. The main changes in this file are as follows android { defaultConfig { externalNativeBuild { cmake { cppFlags \u0026quot;\u0026quot; abiFilters \u0026quot;x86\u0026quot; } } } } That is, specify the value of abiFilters as the same value as the static library you just built.\nConfiguring CMake #The CMakeLists.txt file is a bit more complicated, it needs to do two jobs, find the static libraries and static libraries\u0026rsquo; header files, and link the static libraries.\nfind header file #In the second part of the article we already knew about the include_directories command that lets CMake find header files, just set the parameter to the 3rd directory. It\u0026rsquo;s worth noting that CMake uses the current CMakeLists.txt file as its working directory, so to specify to the 3rd file we need to go all the way back in the directory to the root project, and end up with include_directories(... /... /... /... /... /3rd) configuration. Try to use relative paths, you can collaborate with multiple people without having to change the configuration.\nfind static library #The next step is to get CMake to find our static library. When it comes to libraries, it\u0026rsquo;s all related to add_library, the difference is just the parameters. When adding a library using source, we need to specify the name and source location of the library, whereas to reference a third-party library, we need to specify the name and type of the library, plus an IMPORTED indicator parameter to tell CMake that the library is imported. So there is a configuration like add_library(addSum STATIC IMPORTED).\nHowever, here we have only told CMake the name of the library, where the library is stored is not yet known, so we need another command to tell CMake where the library is stored. When it comes to configuration parameters, it\u0026rsquo;s usually the set_target_properties command, which can be called multiple times to set multiple configurations. set_target_properties(addSum PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/... /jniLibs/${ANDROID_ABI}/libsum.a), the first parameter and the first parameter of the previous entry are one-to-one and can be taken at will. In fact, add_library is equivalent to generating a target product, and the first parameter is used to refer to such a product, which is why our set_target_properties is allowed to find the appropriate target setting properties. The second parameter is the standard way to write a configuration property, the third represents the property variable, and the fourth is the value of the property. The variable that configures the library path is IMPORTED_LOCATION, and the value has a pitfall here, as CMake under Android restricts the value to an absolute path, not a relative path. This is contrary to the original purpose of using CMake, fortunately, we have a few preset values that we can use, CMAKE_CURRENT_SOURCE_DIR is one of them, it represents the absolute path of the current CMakeLIsts.txt file, with this, and the directory fallback function, we can find any appropriate directory. At this point, a second problem arises, when there are multiple architectures with static libraries to configure, we introduce different directories, and there is a lot of duplication of configurations. Luckily, it helps to have ANDROID_ABI, which refers to a certain architecture that is currently being compiled, and as the compilation progresses, this value is set to the appropriate value, and is a one-to-one correspondence with the architecture being compiled. So, even though they are a bit strange, this gives me flexibility and simplicity.\nLinking static libraries #Now we have the header files and the libraries, but the compilation of C++ is divided into two steps, so far, our work has only done the compilation of things, not yet involved in the linking of things, of course, compared to the previous configuration, this is much simpler, undoubtedly is in the target_link_libraries command to add a parameter can be, such as\ntarget_link_libraries( native-lib ${log-lib} addSum ) Just yo note that the name corresponds one to one with the name configured during add_library.\nUse in source code #After a long wait, we are now able to introduce the addsum header file in the native-lib.cpp file and use the functions inside to get the job done. I intend for the function to return a string containing the result of the addition operation. The final implementation is as follows\n#include \u0026lt;jni.h\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;lib.h\u0026gt; extern \u0026#34;C\u0026#34; JNIEXPORT jstring JNICALL Java_me_hongui_cmakesum_MainActivity_stringFromJNI( JNIEnv* env, jobject /* this */) { std::string hello = std::to_string(sum(1,1)); return env-\u0026gt;NewStringUTF(hello.c_str()); } At this point, click the run button on the toolbar and we can finally see the results of our static library work in the Android emulator.\nExtension #In fact, besides the way of referencing static libraries, we can also directly reference the source code by configuring the CMakeLists.txt file, which allows us to customize the source code anytime, anywhere, but it also slows down the compilation speed and may increase the complexity of CMakeLists.txt. So I still recommend the direct static library approach.\nSummary #CMake in fact, there are many, many commands, we are involved here is only a very small part. However, I think that understanding CMake has these contents almost on it, the subsequent need to target learning on the line. Learning a technology, we must not be greedy, greedy for details. First of all, we must grasp the main, clear vein, the details of the latter is a matter of water to the drain. For CMake, I think it is the C++ code compiled into a binary process as the main trunk is enough. Where the source code comes from, where the header files are, where the library files are, how to organize the compilation, what libraries are involved in linking, what products are generated, and some general operations to complete these tasks, copying files ah, directory information ah, etc., a collection of these operations constitute the main body of CMake. In addition, CMake is really just a build tool, it is not a compiler or linker, and some problems may involve not only cmake, but also the compiler and linker. Of course, these are all issues that you may encounter later on, when you know more about it.\n","date":"9 August 2021","permalink":"/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html","section":"Posts","summary":"Preface #CMake is a build tool, through which you can easily create cross-platform projects.","title":"Personal understanding and useage of CMake"},{"content":"","date":null,"permalink":"/en/tags/c/c++/","section":"Tags","summary":"","title":"C/C++"},{"content":"","date":null,"permalink":"/en/categories/c/c++/","section":"Categories","summary":"","title":"C/C++"}]