<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Study Guide on Deep thinking</title><link>https://deep-thinking.top/en/tags/study-guide/</link><description>Recent content in Study Guide on Deep thinking</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 31 Oct 2022 21:33:38 +0800</lastBuildDate><atom:link href="https://deep-thinking.top/en/tags/study-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern C++ study guide-template</title><link>https://deep-thinking.top/en/post/Modern-C++-study-guide-template.html</link><pubDate>Mon, 31 Oct 2022 21:33:38 +0800</pubDate><guid>https://deep-thinking.top/en/post/Modern-C++-study-guide-template.html</guid><description>&lt;blockquote>
&lt;p>Template have always had a pivotal role as an important feature of C++, and are a great tool for writing highly abstract code.&lt;/p>
&lt;/blockquote>
&lt;h3 id="what-is-template" class="relative group">What is template &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-is-template" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Template are real-life examples: fix the parts that are all the same, leave the parts that change empty, and combine the two parts to form something valid when you use it. Application forms and Word templates are examples of this, as are templates in C++, but more explicitly in C++, where the variable part is a surrogate type, called a generic parameter.&lt;/p></description></item><item><title>Modern C++ Study Guide - Standard Library</title><link>https://deep-thinking.top/en/post/Modern%20C++%20Study%20Guide%20-%20Standard%20Library.html</link><pubDate>Wed, 20 Jul 2022 22:15:05 +0800</pubDate><guid>https://deep-thinking.top/en/post/Modern%20C++%20Study%20Guide%20-%20Standard%20Library.html</guid><description>&lt;blockquote>
&lt;p>In [the previous chapter](&lt;a href="https://www.yuque.com/docs/share/adb5b1e4-f3c6-46fd-ba4b-4dabce9b4f2a?#" target="_blank" rel="noreferrer">https://www.yuque.com/docs/share/adb5b1e4-f3c6-46fd-ba4b-4dabce9b4f2a?#&lt;/a> Modern C++ Study Guide - The Type System) we explored the type system of C++ and proposed a low-to-high and again high-to-low study idea. This article is a study guide from high to low, and hopefully provides a new perspective.&lt;/p>
&lt;/blockquote>
&lt;h3 id="what-is-standard-library" class="relative group">What is standard library &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-is-standard-library" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Programming languages are generally divided into two parts, one is the syntax part, such as the type system in the previous chapter, and the other part is the predefined toolset accomplished with this syntax, such as the subject of this article - the standard library. The standard library is a bunch of code that we can use directly when we write code, as if we had written it in advance. Not only that, the standard library is also cross-platform, or industrial-grade tested, so the standard library has the characteristics of reliability and security.
The C++ standard library includes many aspects, including classes &lt;code>vector&lt;/code>, &lt;code>string&lt;/code>, objects &lt;code>std::cin&lt;/code>, &lt;code>std::cout&lt;/code>, and functions &lt;code>move&lt;/code>, &lt;code>copy&lt;/code>, etc., so they are generally categorized according to their functions.&lt;/p></description></item><item><title>Modern C++ Study Guide-roadmap</title><link>https://deep-thinking.top/en/post/Modern%20C++%20Study%20Guide-roadmap.html</link><pubDate>Sat, 25 Jun 2022 08:51:01 +0800</pubDate><guid>https://deep-thinking.top/en/post/Modern%20C++%20Study%20Guide-roadmap.html</guid><description>&lt;p>C++ is a forty-year-old language that has gone through four major version upgrades (Birth, 98, 11, 17(20), 14 counts as a minor upgrade). Each upgrade was a trade-off between many problems and solutions. Understanding this history can better help us to clarify the development of the language. So next I will borrow its development history, talk about my understanding of it, and finally give a guide to what I think is a more reasonable learning route.&lt;/p></description></item></channel></rss>