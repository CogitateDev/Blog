<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NDK on Deep thinking</title><link>https://bravebuffalo.cc/en/tags/ndk/</link><description>Recent content in NDK on Deep thinking</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Mar 2022 11:30:40 +0800</lastBuildDate><atom:link href="https://bravebuffalo.cc/en/tags/ndk/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Android NDK-basic concepts</title><link>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</link><pubDate>Sun, 06 Mar 2022 11:30:40 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</guid><description>&lt;p>Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development. Although with the support of modern tool chains, the difficulty of this work has been greatly reduced, after all, everything is difficult at the beginning, and beginners often still encounter many unpredictable problems. This article is a simple guide written based on this background. I hope it will be helpful to readers who have just started writing C/C++ libraries. At the same time, in order to reduce cognitive gaps as much as possible, this article will try to start with the simplest function and gradually add tool chains until the final function is achieved, truly knowing what is happening and why.&lt;/p></description></item></channel></rss>