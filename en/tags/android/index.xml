<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on Deep thinking</title><link>https://bravebuffalo.cc/en/tags/android/</link><description>Recent content in Android on Deep thinking</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 09 May 2023 22:14:38 +0800</lastBuildDate><atom:link href="https://bravebuffalo.cc/en/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Android OpenGLES learning-draw a color</title><link>https://bravebuffalo.cc/en/post/learning%20opengles%20on%20the%20android-fill%20the%20window.html</link><pubDate>Tue, 09 May 2023 22:14:38 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/learning%20opengles%20on%20the%20android-fill%20the%20window.html</guid><description>We know that the screen displays content by emitting RGB lamp beads one by one, and the brightness of the lamp beads is determined by a memory area. By writing data to this memory area, we can observe the data display effect on the screen. This is a complex and flexible job.</description></item><item><title>Introduction to Android NDK-basic concepts</title><link>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</link><pubDate>Sun, 06 Mar 2022 11:30:40 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</guid><description>Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development. Although with the support of modern tool chains, the difficulty of this work has been greatly reduced, after all, everything is difficult at the beginning, and beginners often still encounter many unpredictable problems.</description></item><item><title>A introduction to Android JNI</title><link>https://bravebuffalo.cc/en/post/Android-JNI-development-introduction.html</link><pubDate>Sun, 12 Sep 2021 21:34:45 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Android-JNI-development-introduction.html</guid><description>What is JNI #The full name of JNI is Java Native Interface, and as the name suggests, it&amp;rsquo;s a programming method that solves the problem of Java and C/C++ calling each other. It really only solves two aspects of the problem, how to find and how to access. Figure out these two topics and we have learned JNI development.</description></item><item><title>Personal understanding and useage of CMake</title><link>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</guid><description>Preface #CMake is a build tool, through which you can easily create cross-platform projects. It is usually used to build a project in two steps: generating a project file from the source code, and building the target product (which may be a dynamic library, a static library, or an executable program) from the project file.</description></item><item><title>A introduction to Kotlin cotoutine-from zero to multiple</title><link>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20cotoutine-from%20zero%20to%20multiple.html</link><pubDate>Tue, 30 Mar 2021 19:10:30 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20cotoutine-from%20zero%20to%20multiple.html</guid><description>In the last post, I introduced the creation, use, and collaboration of Kotlin coroutines. This post will introduce more usage scenarios and continue to take you into the world of coroutines.
使用协程处理异步数据流 #Common programming languages have built-in representations of datasets of different objects of the same type, often called container classes.</description></item><item><title>A introduction to Kotlin coroutine-from theory to practice</title><link>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-from%20theory%20to%20practice.html</link><pubDate>Sat, 27 Mar 2021 19:02:30 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-from%20theory%20to%20practice.html</guid><description>The previous article partially explained Kotlin coroutines from a theoretical point of view, and this article will continue the journey of coroutines from a practical point of view, based on the previous article.
From the source #In Kotlin, in order to use a coroutine, it first needs to be created using a co-creator, but there&amp;rsquo;s another prerequisite - a co-program scope (CoroutineScope).</description></item><item><title>A introduction to Kotlin coroutine-those unclear relationships</title><link>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-those%20unclear%20relationships.html</link><pubDate>Fri, 26 Mar 2021 18:50:29 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-those%20unclear%20relationships.html</guid><description>Kotlin&amp;rsquo;s coroutines have been increasingly sought after by Android developers since its introduction. On the other hand, due to its huge API, it has also shut out a considerable number of developers. This article tries to start from a few important concepts of coroutines, in the complex API to restore its original face, to bring readers into the Kotlin coroutine world with a new perspective.</description></item></channel></rss>