<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on Deep thinking</title><link>https://bravebuffalo.cc/en/tags/android/</link><description>Recent content in Android on Deep thinking</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 09 May 2023 22:14:38 +0800</lastBuildDate><atom:link href="https://bravebuffalo.cc/en/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Android OpenGLES learning-draw a color</title><link>https://bravebuffalo.cc/en/post/learning%20opengles%20on%20the%20android-fill%20the%20window.html</link><pubDate>Tue, 09 May 2023 22:14:38 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/learning%20opengles%20on%20the%20android-fill%20the%20window.html</guid><description>&lt;blockquote>
&lt;p>We know that the screen displays content by emitting RGB lamp beads one by one, and the brightness of the lamp beads is determined by a memory area. By writing data to this memory area, we can observe the data display effect on the screen. This is a complex and flexible job. In order to facilitate this work, the pioneers developed the OpenGL standard, and our story will start from here.&lt;/p></description></item><item><title>Introduction to Android NDK-basic concepts</title><link>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</link><pubDate>Sun, 06 Mar 2022 11:30:40 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</guid><description>&lt;p>Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development. Although with the support of modern tool chains, the difficulty of this work has been greatly reduced, after all, everything is difficult at the beginning, and beginners often still encounter many unpredictable problems. This article is a simple guide written based on this background. I hope it will be helpful to readers who have just started writing C/C++ libraries. At the same time, in order to reduce cognitive gaps as much as possible, this article will try to start with the simplest function and gradually add tool chains until the final function is achieved, truly knowing what is happening and why.&lt;/p></description></item><item><title>A introduction to Android JNI</title><link>https://bravebuffalo.cc/en/post/Android-JNI-development-introduction.html</link><pubDate>Sun, 12 Sep 2021 21:34:45 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Android-JNI-development-introduction.html</guid><description>&lt;h1 id="what-is-jni" class="relative group">What is JNI &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-is-jni" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>The full name of JNI is Java Native Interface, and as the name suggests, it&amp;rsquo;s a programming method that solves the problem of Java and C/C++ calling each other. &lt;em>&lt;strong>It really only solves two aspects of the problem, how to find and how to access.&lt;/strong>&lt;/em> Figure out these two topics and we have learned JNI development.&lt;em>&lt;strong>It should be noted that JNI development involves only a small part of the C/C++ development knowledge, when we encounter a problem we first need to determine whether it is a C/C++ problem or a JNI problem, which can save a lot of time searching and locating.&lt;/strong>&lt;/em>&lt;/p></description></item><item><title>Personal understanding and useage of CMake</title><link>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</guid><description>&lt;h1 id="preface" class="relative group">Preface &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#preface" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>CMake is a build tool, through which you can easily create cross-platform projects. It is usually used to build a project in two steps: generating a project file from the source code, and building the target product (which may be a dynamic library, a static library, or an executable program) from the project file. One of the main advantages of using CMake is that in the multi-platform or multi-people collaborative projects, developers can make their own preferences to make the choice of IDE, not subject to the influence of other people&amp;rsquo;s project configuration, it is a bit like a cross-platform IDE, through which the configuration of the relevant settings, you can be in multiple platforms seamlessly, improve development efficiency.&lt;/p></description></item><item><title>A introduction to Kotlin cotoutine-from zero to multiple</title><link>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20cotoutine-from%20zero%20to%20multiple.html</link><pubDate>Tue, 30 Mar 2021 19:10:30 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20cotoutine-from%20zero%20to%20multiple.html</guid><description>&lt;blockquote>
&lt;p>In the last post, I introduced the creation, use, and collaboration of Kotlin coroutines. This post will introduce more usage scenarios and continue to take you into the world of coroutines.&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用协程处理异步数据流" class="relative group">使用协程处理异步数据流 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e4%bd%bf%e7%94%a8%e5%8d%8f%e7%a8%8b%e5%a4%84%e7%90%86%e5%bc%82%e6%ad%a5%e6%95%b0%e6%8d%ae%e6%b5%81" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Common programming languages have built-in representations of datasets of different objects of the same type, often called container classes. Different container classes are suitable for different usage scenarios, and Kotlin&amp;rsquo;s &lt;code>Flow&lt;/code> was introduced to represent asynchronous data flow in the context of asynchronous computing.&lt;/p></description></item><item><title>A introduction to Kotlin coroutine-from theory to practice</title><link>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-from%20theory%20to%20practice.html</link><pubDate>Sat, 27 Mar 2021 19:02:30 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-from%20theory%20to%20practice.html</guid><description>&lt;blockquote>
&lt;p>The previous article partially explained Kotlin coroutines from a theoretical point of view, and this article will continue the journey of coroutines from a practical point of view, based on the previous article.&lt;/p>
&lt;/blockquote>
&lt;h3 id="from-the-source" class="relative group">From the source &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#from-the-source" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>In Kotlin, in order to use a coroutine, it first needs to be created using a co-creator, but there&amp;rsquo;s another prerequisite - a co-program scope (&lt;code>CoroutineScope&lt;/code>). In early Kotlin implementations, the coroutine creator was a first-class function, meaning that we could create a coroutine anytime, anywhere with the coroutine creator. However, after the official release of coroutines, the coroutine creator needs to be created on a coroutine scope object, and Kotlin added coroutine scopes to enable structured concurrency. What is structured concurrency? In layman&amp;rsquo;s terms, it is the ability to properly implement multiple coroutines for monitoring and management. In practice, we may need to create multiple coroutines to accomplish different tasks. In order to manage these unrelated coroutines, Kotlin introduced the coroutine scope, through a certain coroutine scope created by the coroutine will be managed by it, in the conditions are met, the execution of each coroutine to cancel the work or to end their own.&lt;/p></description></item><item><title>A introduction to Kotlin coroutine-those unclear relationships</title><link>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-those%20unclear%20relationships.html</link><pubDate>Fri, 26 Mar 2021 18:50:29 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/A%20introduction%20to%20Kotlin%20coroutine-those%20unclear%20relationships.html</guid><description>&lt;blockquote>
&lt;p>Kotlin&amp;rsquo;s coroutines have been increasingly sought after by Android developers since its introduction. On the other hand, due to its huge API, it has also shut out a considerable number of developers. This article tries to start from a few important concepts of coroutines, in the complex API to restore its original face, to bring readers into the Kotlin coroutine world with a new perspective.&lt;/p></description></item></channel></rss>