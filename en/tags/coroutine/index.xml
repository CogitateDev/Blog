<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coroutine on Deep thinking</title><link>https://deep-thinking.top/en/tags/coroutine/</link><description>Recent content in Coroutine on Deep thinking</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 30 Mar 2021 19:10:30 +0800</lastBuildDate><atom:link href="https://deep-thinking.top/en/tags/coroutine/index.xml" rel="self" type="application/rss+xml"/><item><title>A introduction to Kotlin cotoutine-from zero to multiple</title><link>https://deep-thinking.top/en/post/A%20introduction%20to%20Kotlin%20cotoutine-from%20zero%20to%20multiple.html</link><pubDate>Tue, 30 Mar 2021 19:10:30 +0800</pubDate><guid>https://deep-thinking.top/en/post/A%20introduction%20to%20Kotlin%20cotoutine-from%20zero%20to%20multiple.html</guid><description>&lt;blockquote>
&lt;p>In the last post, I introduced the creation, use, and collaboration of Kotlin coroutines. This post will introduce more usage scenarios and continue to take you into the world of coroutines.&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用协程处理异步数据流" class="relative group">使用协程处理异步数据流 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e4%bd%bf%e7%94%a8%e5%8d%8f%e7%a8%8b%e5%a4%84%e7%90%86%e5%bc%82%e6%ad%a5%e6%95%b0%e6%8d%ae%e6%b5%81" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Common programming languages have built-in representations of datasets of different objects of the same type, often called container classes. Different container classes are suitable for different usage scenarios, and Kotlin&amp;rsquo;s &lt;code>Flow&lt;/code> was introduced to represent asynchronous data flow in the context of asynchronous computing.&lt;/p></description></item><item><title>A introduction to Kotlin coroutine-from theory to practice</title><link>https://deep-thinking.top/en/post/A%20introduction%20to%20Kotlin%20coroutine-from%20theory%20to%20practice.html</link><pubDate>Sat, 27 Mar 2021 19:02:30 +0800</pubDate><guid>https://deep-thinking.top/en/post/A%20introduction%20to%20Kotlin%20coroutine-from%20theory%20to%20practice.html</guid><description>&lt;blockquote>
&lt;p>The previous article partially explained Kotlin coroutines from a theoretical point of view, and this article will continue the journey of coroutines from a practical point of view, based on the previous article.&lt;/p>
&lt;/blockquote>
&lt;h3 id="from-the-source" class="relative group">From the source &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#from-the-source" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>In Kotlin, in order to use a coroutine, it first needs to be created using a co-creator, but there&amp;rsquo;s another prerequisite - a co-program scope (&lt;code>CoroutineScope&lt;/code>). In early Kotlin implementations, the coroutine creator was a first-class function, meaning that we could create a coroutine anytime, anywhere with the coroutine creator. However, after the official release of coroutines, the coroutine creator needs to be created on a coroutine scope object, and Kotlin added coroutine scopes to enable structured concurrency. What is structured concurrency? In layman&amp;rsquo;s terms, it is the ability to properly implement multiple coroutines for monitoring and management. In practice, we may need to create multiple coroutines to accomplish different tasks. In order to manage these unrelated coroutines, Kotlin introduced the coroutine scope, through a certain coroutine scope created by the coroutine will be managed by it, in the conditions are met, the execution of each coroutine to cancel the work or to end their own.&lt;/p></description></item><item><title>A introduction to Kotlin coroutine-those unclear relationships</title><link>https://deep-thinking.top/en/post/A%20introduction%20to%20Kotlin%20coroutine-those%20unclear%20relationships.html</link><pubDate>Fri, 26 Mar 2021 18:50:29 +0800</pubDate><guid>https://deep-thinking.top/en/post/A%20introduction%20to%20Kotlin%20coroutine-those%20unclear%20relationships.html</guid><description>&lt;blockquote>
&lt;p>Kotlin&amp;rsquo;s coroutines have been increasingly sought after by Android developers since its introduction. On the other hand, due to its huge API, it has also shut out a considerable number of developers. This article tries to start from a few important concepts of coroutines, in the complex API to restore its original face, to bring readers into the Kotlin coroutine world with a new perspective.&lt;/p></description></item></channel></rss>