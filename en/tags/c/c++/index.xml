<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on Deep thinking</title><link>https://deep-thinking.top/en/tags/c/c++/</link><description>Recent content in C/C++ on Deep thinking</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Mar 2022 11:30:40 +0800</lastBuildDate><atom:link href="https://deep-thinking.top/en/tags/c/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Android NDK-basic concepts</title><link>https://deep-thinking.top/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</link><pubDate>Sun, 06 Mar 2022 11:30:40 +0800</pubDate><guid>https://deep-thinking.top/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</guid><description>&lt;p>Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development. Although with the support of modern tool chains, the difficulty of this work has been greatly reduced, after all, everything is difficult at the beginning, and beginners often still encounter many unpredictable problems. This article is a simple guide written based on this background. I hope it will be helpful to readers who have just started writing C/C++ libraries. At the same time, in order to reduce cognitive gaps as much as possible, this article will try to start with the simplest function and gradually add tool chains until the final function is achieved, truly knowing what is happening and why.&lt;/p></description></item><item><title>A introduction to Android JNI</title><link>https://deep-thinking.top/en/post/Android-JNI-development-introduction.html</link><pubDate>Sun, 12 Sep 2021 21:34:45 +0800</pubDate><guid>https://deep-thinking.top/en/post/Android-JNI-development-introduction.html</guid><description>&lt;h1 id="what-is-jni" class="relative group">What is JNI &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-is-jni" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>The full name of JNI is Java Native Interface, and as the name suggests, it&amp;rsquo;s a programming method that solves the problem of Java and C/C++ calling each other. &lt;em>&lt;strong>It really only solves two aspects of the problem, how to find and how to access.&lt;/strong>&lt;/em> Figure out these two topics and we have learned JNI development.&lt;em>&lt;strong>It should be noted that JNI development involves only a small part of the C/C++ development knowledge, when we encounter a problem we first need to determine whether it is a C/C++ problem or a JNI problem, which can save a lot of time searching and locating.&lt;/strong>&lt;/em>&lt;/p></description></item><item><title>Personal understanding and useage of CMake</title><link>https://deep-thinking.top/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://deep-thinking.top/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</guid><description>&lt;h1 id="preface" class="relative group">Preface &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#preface" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>CMake is a build tool, through which you can easily create cross-platform projects. It is usually used to build a project in two steps: generating a project file from the source code, and building the target product (which may be a dynamic library, a static library, or an executable program) from the project file. One of the main advantages of using CMake is that in the multi-platform or multi-people collaborative projects, developers can make their own preferences to make the choice of IDE, not subject to the influence of other people&amp;rsquo;s project configuration, it is a bit like a cross-platform IDE, through which the configuration of the relevant settings, you can be in multiple platforms seamlessly, improve development efficiency.&lt;/p></description></item></channel></rss>