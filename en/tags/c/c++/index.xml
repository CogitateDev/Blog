<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on Deep thinking</title><link>https://bravebuffalo.cc/en/tags/c/c++/</link><description>Recent content in C/C++ on Deep thinking</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://bravebuffalo.cc/en/tags/c/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Android NDK-basic concepts</title><link>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</link><pubDate>Sun, 06 Mar 2022 11:30:40 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Introduction%20to%20Android%20NDK-basic%20concepts.html</guid><description>Sometimes it is necessary to use libraries written in C/C++ for security, performance, and code sharing considerations during the development. Although with the support of modern tool chains, the difficulty of this work has been greatly reduced, after all, everything is difficult at the beginning, and beginners often still encounter many unpredictable problems.</description></item><item><title>Personal understanding and useage of CMake</title><link>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</guid><description>Preface #CMake is a build tool, through which you can easily create cross-platform projects. It is usually used to build a project in two steps: generating a project file from the source code, and building the target product (which may be a dynamic library, a static library, or an executable program) from the project file.</description></item></channel></rss>