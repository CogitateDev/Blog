<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on Deep thinking</title><link>https://bravebuffalo.cc/en/tags/c++/</link><description>Recent content in C++ on Deep thinking</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 31 Oct 2022 21:33:38 +0800</lastBuildDate><atom:link href="https://bravebuffalo.cc/en/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern C++ study guide-template</title><link>https://bravebuffalo.cc/en/post/Modern%20C++%20study%20guide-template.html</link><pubDate>Mon, 31 Oct 2022 21:33:38 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Modern%20C++%20study%20guide-template.html</guid><description>Template have always had a pivotal role as an important feature of C++, and are a great tool for writing highly abstract code.
What is template #Template are real-life examples: fix the parts that are all the same, leave the parts that change empty, and combine the two parts to form something valid when you use it.</description></item><item><title>Modern C++ Study Guide - Standard Library</title><link>https://bravebuffalo.cc/en/post/Modern%20C++%20Study%20Guide%20-%20Standard%20Library.html</link><pubDate>Wed, 20 Jul 2022 22:15:05 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Modern%20C++%20Study%20Guide%20-%20Standard%20Library.html</guid><description>In [the previous chapter](https://www.yuque.com/docs/share/adb5b1e4-f3c6-46fd-ba4b-4dabce9b4f2a?# Modern C++ Study Guide - The Type System) we explored the type system of C++ and proposed a low-to-high and again high-to-low study idea. This article is a study guide from high to low, and hopefully provides a new perspective.
What is standard library #Programming languages are generally divided into two parts, one is the syntax part, such as the type system in the previous chapter, and the other part is the predefined toolset accomplished with this syntax, such as the subject of this article - the standard library.</description></item><item><title>Modern C++ Study Guide - Type Systems</title><link>https://bravebuffalo.cc/en/post/modern-c++-study-guide-type-system.html</link><pubDate>Sun, 26 Jun 2022 11:11:59 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/modern-c++-study-guide-type-system.html</guid><description>In the previous post, we provided a directional guide, but what and how to learn was not developed in detail. This article will build on the previous article and focus on how to learn C++&amp;rsquo;s type system.
Before the start #Before we get into the type system, there is one thing we should agree on - use the modern syntax of C++ whenever possible.</description></item><item><title>Modern C++ Study Guide-roadmap</title><link>https://bravebuffalo.cc/en/post/Modern%20C++%20Study%20Guide-roadmap.html</link><pubDate>Sat, 25 Jun 2022 08:51:01 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Modern%20C++%20Study%20Guide-roadmap.html</guid><description>C++ is a forty-year-old language that has gone through four major version upgrades (Birth, 98, 11, 17(20), 14 counts as a minor upgrade). Each upgrade was a trade-off between many problems and solutions. Understanding this history can better help us to clarify the development of the language. So next I will borrow its development history, talk about my understanding of it, and finally give a guide to what I think is a more reasonable learning route.</description></item></channel></rss>