<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on Deep thinking</title><link>https://bravebuffalo.cc/en/categories/c/c++/</link><description>Recent content in C/C++ on Deep thinking</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://bravebuffalo.cc/en/categories/c/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>A introduction to Android JNI</title><link>https://bravebuffalo.cc/en/post/Android-JNI-development-introduction.html</link><pubDate>Sun, 12 Sep 2021 21:34:45 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Android-JNI-development-introduction.html</guid><description>What is JNI #The full name of JNI is Java Native Interface, and as the name suggests, it&amp;rsquo;s a programming method that solves the problem of Java and C/C++ calling each other. It really only solves two aspects of the problem, how to find and how to access. Figure out these two topics and we have learned JNI development.</description></item><item><title>Personal understanding and useage of CMake</title><link>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://bravebuffalo.cc/en/post/Personal%20understanding%20and%20useage%20of%20CMake.html</guid><description>Preface #CMake is a build tool, through which you can easily create cross-platform projects. It is usually used to build a project in two steps: generating a project file from the source code, and building the target product (which may be a dynamic library, a static library, or an executable program) from the project file.</description></item></channel></rss>