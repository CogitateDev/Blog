<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenGLES on 低头沉思</title><link>https://bravebuffalo.cc/tags/opengles/</link><description>Recent content in OpenGLES on 低头沉思</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 09 May 2023 22:14:38 +0800</lastBuildDate><atom:link href="https://bravebuffalo.cc/tags/opengles/index.xml" rel="self" type="application/rss+xml"/><item><title>Android-OpenGLES学习-画个颜色</title><link>https://bravebuffalo.cc/post/Android-OpenGLES%E5%AD%A6%E4%B9%A0-%E7%94%BB%E4%B8%AA%E9%A2%9C%E8%89%B2.html</link><pubDate>Tue, 09 May 2023 22:14:38 +0800</pubDate><guid>https://bravebuffalo.cc/post/Android-OpenGLES%E5%AD%A6%E4%B9%A0-%E7%94%BB%E4%B8%AA%E9%A2%9C%E8%89%B2.html</guid><description>我们知道屏幕显示出内容是靠一个一个发光的RGB灯珠，而决定灯珠亮度的是一块内存区域，通过往这一块内存区域写入数据，我们就能在屏幕上观察到数据显示效果。这是个复杂又灵活的工作，为了方便完成这项工作，先驱们制定出了OpenGL标准，我们的故事也将从这里开始。
OpenGL ES #OpenGL ES是OpenGL的精简版本，Android平台从发行伊始就提供了OpenGL ES的支持，只是不同的版本，支持的OpenGL ES版本不同，目前主流的版本还是2.0和3.0。OpenGL ES是一组API，为开发者提供配置数据，传输数据，绘制内容的能力。它的工作是和绘制严格相关的，所以光是OpenGL ES不会造成很大的理解障碍，问题出在配置OpenGL ES的配置环境上。为什么要将OpenGL ES API和配置环境分开呢，因为OpenGL ES是跨平台的API，但是实际运行的时候需要和特定平台绑定，如Android。平台间准备OpenGL ES环境所需要的条件不同，为了保证OpenGL ES的跨平台能力，就需要将配置环境单独拿出来和特定平台绑定。在Android上这个配置环境就是EGL。明确OpenGL ES API和配置OpenGL ES环境的区别不仅对理解这两个关键概念有很大帮助，更是对后期调试代码，排错帮助极大。
工作流程 #明确了一些基本概念之后，我们接下来最重要的任务是理清OpenGL ES的工作流程。很多教程一上来就列举一大堆名词或者直接上实例，我觉得是不妥的。只有熟悉了工作流程，我们在写代码的时候才能做到心中有数，才能在排错过程中更快更准确地定位问题。
准备环境 #OpenGL ES是由一系列API组成的，但是不代表可以在任何时机下调用这些API，而是需要运行环境进行一些设置，这就是准备环境。准备环境通常是做一些显存分配，窗口配置的工作，很繁琐却必不可少。
准备着色器 #着色器很重要，但是对于初学者来说不需要用太多的精力来关注它，很多效果直接可以在网上找到现成的代码，但是怎样将这些代码组装成一个完整可运行的程序却不一定有。我们只需要明确着色器是OpenGL ES开发中的重要一环，这一环这一是魔法发生的地方。
准备程序 #着色器虽然重要，但是也不能独立运行，需要由一个程序管理。这里说的程序是一个OpenGL ES对象，它负责将着色器组装在一起。在运行大部分OpenGL ES API前都需要先使用到这个对像。
渲染 #渲染环节其实也是在准备数据，我们需要将着色器中用到的一些数据赋值，然后调用绘制API，完成最后的绘制工作。GPU会将数据传递给着色器，着色器经过流水线，将数据转换成最终的显示数据存储在显存中。
上屏 #渲染不代表就是将数据显示出来了，而是说数据计算好了。计算好的数据要想在屏幕上看到，可能需要调用OpenGL ES环境配置工具中的某个函数，如交换缓冲或者切换显示对象。
清理 #和内存一样，我们使用OpenGL ES API也会申请到一些资源，在渲染结束后，我们应该主动将资源释放，以便后续程序使用。很多时候我们正常申请资源没有成功，可能是前面有资源没有释放的原因。
以上就是开发OpenGL ES应用的大致流程。由于OpenGL ES开发不好排错，所以在发现问题时最有效的定位方法是确定出错环节，然后再针对性地处理。所以熟悉流程很重要。
实例上手 #由于OpenGLES相关概念很多，为了尽可能减少相关概念的干扰，本文打算只将上述流程中的第一步拿出来着重讲解。同时利用涉及到的知识点，实现一个最小的示例——将窗口染成红色。
下面开始讲解第一个概念——EGL。
EGL #OpenGL ES只是对绘图的抽象，没有提供运行环境的抽象。如要申请显存，显存在哪里，需要明确，图像计算好了，显示在哪里，也需要指定。EGL就是对这些环境抽象的集合，为了通俗地解释相关概念，我们可以玩一下角色扮演——假如让我们设计相关标准，我们该如何做。</description></item></channel></rss>