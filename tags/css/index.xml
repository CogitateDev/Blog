<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSS on 低头沉思</title><link>hongui.github.io/tags/css/</link><description>Recent content in CSS on 低头沉思</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 12 Feb 2022 09:23:30 +0800</lastBuildDate><atom:link href="hongui.github.io/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title>用纯HTML，JS，CSS实现横向滚动标签页</title><link>hongui.github.io/post/%E7%94%A8%E7%BA%AFHTML%EF%BC%8CJS%EF%BC%8CCSS%E5%AE%9E%E7%8E%B0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E6%A0%87%E7%AD%BE%E9%A1%B5.html</link><pubDate>Sat, 12 Feb 2022 09:23:30 +0800</pubDate><guid>hongui.github.io/post/%E7%94%A8%E7%BA%AFHTML%EF%BC%8CJS%EF%BC%8CCSS%E5%AE%9E%E7%8E%B0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E6%A0%87%E7%AD%BE%E9%A1%B5.html</guid><description>前言 前不久，在我的一个项目中，需要展示一个横向滚动的标签页，它支持鼠标横向拖动和点击切换。在实现的过程中，我发现这个小功能需要同时用到前端的三辆马车，但是实现难度不高，而且最终效果还不错，是个难得的初学者项目，于是萌生了写这篇文章的想法，希望对初学者有所帮助。同时为了避免初学者学习框架，我打算用纯原生的方式实现它。
我们最终的效果应该类似于下面： 需求分析 需求分析就是细化我们需要完成的功能，某个功能的完成需要哪些技术的参与。对于初学者，需求分析至关重要，它可以帮助我们理清思路，找到解决问题的突破口，所以应该引起足够的重视。以本篇目标为例，标签页的需求分析就可以像下面这样：
我们的展示主体是标签页，HTML就是实现主体的主要技术； 标签页需要可以拖动和点击，这涉及到鼠标事件的监听和处理，是JS的主场； 既然标签页可以拖动了，那是否要隐藏那个丑陋的滚动条，加个活动指示器，给鼠标变一个样式？很明显，这些都是CSS的优势。 如上，通过对展示，操作，样式的划分，我们进一步明确了HTML，JS，CSS需要完成的工作，甚至连实现都明朗了，所以对需求拆分得越详细，对实现就越有掌控力。
基本框架 对于前端来说，HTML始终是万物之源，所以一言不合先构筑个标准的HTML页面总是没错的。为了便于演示，我将所有的内容都放在一个HTML文件中，文件结构如下
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Tab演示&amp;lt;/title&amp;gt; &amp;lt;!-- 这里是样式区，后续css代码会添加到这里 --&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!-- 这里是页面区，后续HTML代码会添加到这里 --&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;!-- 这里是脚本区，后续JS代码会添加到这里,放在这里是因为方便写代码 --&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/html&amp;gt; 这里和以往不同，我将script放到了最后，这是因为我想在写脚本的时候，页面标签直接可用，减少对页面加载的监听，降低复杂性。
实现基本功能 有了基本结构，下一步当然是画页面啦。从效果图中不难看出，页面主要包括一个一个的选项卡，对于HTML来说，这不就是列表嘛。于是，突破口就出现了，我们先往HTML里面加入列表
1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;肖申克的救赎&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;霸王别姬&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;阿甘正传&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;泰坦尼克号&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;这个杀手不太冷&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;美丽人生&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;千与千寻&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;辛德勒的名单&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;盗梦空间&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;忠犬八公的故事&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 于是，我们有了原始的标签页。但是标签页是竖向的，并且有着丑陋的小黑点，不符合需求。 发现了这些问题，下一步当然解决这些问题了，这当然就是CSS的强项啦。首要问题就是让列表横过来。横过来就是改变了元素的相对位置，也就是对应CSS的布局功能。那说起布局，CSS的布局方式有很多，像float,position等等。标签页是横向多个紧密排列的，一个挨着一个，这当然是用flex啦。至于讨厌的小黑点，这是新东西，需要百度一下。查阅文档发现，ul有个属性list-style-type，只需把它设置为none就可以去除小黑点。 此时，页面上的所有选项卡都紧密排列了。为了让它更像一个选项卡，需要给它居中，限制一下宽度，加个背景色，加点padding。下面就是改完样式的代码</description></item></channel></rss>