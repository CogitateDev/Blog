<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on 低头沉思</title><link>https://hongui.github.io/categories/c/c++/</link><description>Recent content in C/C++ on 低头沉思</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://hongui.github.io/categories/c/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Android-JNI开发概论</title><link>https://hongui.github.io/post/Android-JNI%E5%BC%80%E5%8F%91%E6%A6%82%E8%AE%BA.html</link><pubDate>Sun, 12 Sep 2021 21:34:45 +0800</pubDate><guid>https://hongui.github.io/post/Android-JNI%E5%BC%80%E5%8F%91%E6%A6%82%E8%AE%BA.html</guid><description>&lt;h1 id="什么是jni开发">什么是JNI开发&lt;/h1>
&lt;p>JNI的全称是Java Native Interface，顾名思义，这是一种解决Java和C/C++相互调用的编程方式。&lt;em>&lt;strong>它其实只解决两个方面的问题，怎么找到和怎么访问。&lt;/strong>&lt;/em> 弄清楚这两个话题，我们就学会了JNI开发。&lt;em>&lt;strong>需要注意的是，JNI开发只涉及到一小部分C/C++开发知识，遇到问题的时候我们首先要判断是C/C++的问题还是JNI的问题，这可以节省很多搜索和定位的时间。&lt;/strong>&lt;/em>&lt;/p>
&lt;h1 id="用jvm的眼光看函数调用">用JVM的眼光看函数调用&lt;/h1>
&lt;p>我们知道Java程序是不能单独运行的，它需要运行在JVM上的，而JVM却又需要跑在物理机上，所以它的任务很重，既要处理Java代码，又要处理各种操作系统，硬件等问题。可以说了解了JVM，就了解了Java的全部，当然包括JNI。所以我们先以JVM的身份来看看Java代码是怎样跑起来的吧（只是粗略的内容，省去了很多步骤，为了突出我们在意的部分）。&lt;/p>
&lt;p>运行Java代码前，会先启动一个JVM。在JVM启动后，会加载一些必要的类，这些类中包含一个叫主类的类，也就是含有一个静态成员函数，函数签名为&lt;code>public static void main(String[] args)&lt;/code>的方法。资源加载完成后，JVM就会调用主类的&lt;code>main&lt;/code>方法，开始执行Java代码。随着代码的执行，一个类依赖另一个类，层层依赖，共同完成了程序功能。这就是JVM的大概工作流程，可以说JVM就好比一座大桥，连接着Java大山和native大山。&lt;/p>
&lt;p>现在问题来了，在Java程序中，某个类需要通过JNI技术访问JVM以外的东西，那么它需要怎样告诉我（我现在是JVM）呢？需要一种方法　把普通的Java方法标记成特殊，这个标记就是&lt;code>native&lt;/code>关键字（使用Kotlin时虽然也可以使用这个关键字，但是Kotlin有自己的关键字&lt;code>external&lt;/code>）。当我执行到这个方法时，看到它不一样的标记，我就会从其他地方而不是Class里面寻找执行体，这就是一次JNI调用。也就是说对于Java程序来说，只需要将一个方法标记为&lt;code>native&lt;/code>，在需要的地方调用这个方法，就可以完成JNI调用了。但是对于我，该怎样处理这一次JNI调用呢？&lt;em>&lt;strong>其实上面的寻找执行体的过程是一个跳转问题，在C/C++的世界，跳转问题就是指针问题。那么这个指针它应该指向哪里呢？&lt;/strong>&lt;/em>&lt;/p>
&lt;p>C/C++代码是一个个函数（下文会将Java方法直接用方法简称，而C/C++函数直接用函数简称）组合起来的，每一个函数都是一个指针，这个特性恰好满足我的需要。但是对于我，外面世界那么大，我并&lt;code>不知道从哪里，找什么东西&lt;/code>，给我的信息还是不够。为了限定范围，我规定，只有通过&lt;code>System.loadLibrary(“xxx”)&lt;/code>加载的函数，我才会查找，其余的我直接罢工（抛错）。这一下子减轻了我的工作量，至少我知道从哪里找了。&lt;/p>
&lt;p>确定了范围，下一步就是在这个范围里确定真正的目标了。Java世界里怎样唯一标识一个类呢，有的人会脱口而出——类名，其实不全对，因为类名可能会重名，我们需要全限定的类名，也就是包名加类名，如&lt;code>String&lt;/code>的全限定类名就是&lt;code>java.lang.String&lt;/code>。但是这和我们查找native的方法有什么联系呢。当然有联系，既然一个全限定的类名是唯一的，那么它的方法也是唯一的，那么假如我规定以这个类的全限定类名加上方法名作为native函数的函数名，这样我是不是就可以通过函数名的方式找到native的函数看呢，答案是肯定的，但是有瑕疵，因为Java系统支持方法重载，也就是一个类里面，同名的方法可能有多个。那么构成重载的条件是什么呢，是参数列表不同。所以，结果就很显然了，我在前面的基础上再加上参数列表，组合成查找条件，我是不是就可以唯一确定某一个native函数了呢，这就是JNI的静态注册。&lt;/p>
&lt;p>不过，既然我只需要确定指针的指向，那么我能不能直接给指针赋值，而不是每次都去查找呢，虽然我不知道累，但是还是很耗费时间的。对于这种需求，我当然也是满足的啦，你直接告诉我，我就不找了，我还乐意呢。而且，既然你都给我找到了，我就不需要下那么多规定了，都放开，你说是我就相信你它是。这就是JNI的动态注册。&lt;/p>
&lt;h1 id="jni的函数注册">JNI的函数注册&lt;/h1>
&lt;p>上一节我们通过化身JVM的方式了解了JNI函数注册的渊源，并且引出了两种函数注册方式。从例子上，我们也可以总结出两种注册方式的特点&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注册类型&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>静态注册&lt;/td>
&lt;td>JVM自动查找 &lt;/br> 实现简单&lt;/td>
&lt;td>函数名贼长，限制较多 &lt;/br> 查找耗时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>动态注册&lt;/td>
&lt;td>运行快 &lt;/br>对函数名无限制&lt;/td>
&lt;td>实现复杂&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>那么具体怎么做呢？我们接着往下说。&lt;/p>
&lt;h2 id="静态注册">静态注册&lt;/h2>
&lt;p>虽然静态注册限制比较多，但是都是一些浅显的规则，更容易实施，所以先从静态注册开始讲解。&lt;/p>
&lt;p>静态注册有着明确的开发步骤&lt;/p>
&lt;ol>
&lt;li>编写Java类，声明&lt;code>native&lt;/code>方法;&lt;/li>
&lt;li>使用&lt;code>java xxx.java&lt;/code>将Java源文件编译为class文件&lt;/li>
&lt;li>使用&lt;code>javah xxx&lt;/code>生成对应的&lt;code>.h&lt;/code>文件&lt;/li>
&lt;li>构建工具中引入&lt;code>.h&lt;/code>文件&lt;/li>
&lt;li>实现&lt;code>.h&lt;/code>文件中的函数&lt;/li>
&lt;/ol>
&lt;p>上面的这个步骤是静态开发的基本步骤，但是其实在如今强大的IDE面前，这些都不需要我们手动完成了，在Android Studio中，定义好&lt;code>native&lt;/code>方法后，在方法上按&lt;code>alt + enter&lt;/code>就可以生成正确的函数签名，直接写函数逻辑就可以了。但是学习一门学问，我们还是要抱着求真，求实的态度，所以我用一个例子来阐述一下这些规则，以加深读者的理解。&lt;/p>
&lt;p>&lt;code>Test.java&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">package&lt;/span> &lt;span style="color:#555">me.hongui.demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">public&lt;/span> &lt;span style="color:#000;font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">Test&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">native&lt;/span> String &lt;span style="color:#900;font-weight:bold">jniString&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>native-lib.cpp&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#999;font-weight:bold;font-style:italic">#include&lt;/span> &lt;span style="color:#999;font-weight:bold;font-style:italic">&amp;lt;jni.h&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#999;font-weight:bold;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">extern&lt;/span> &lt;span style="color:#d14">&amp;#34;C&amp;#34;&lt;/span> jstring Java_me_hongui_demo_Test_jniString(JNIEnv &lt;span style="color:#000;font-weight:bold">*&lt;/span>env, jobject thiz) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#998;font-style:italic">// TODO: implement jniString()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面就是一个JNI函数在两端声明的例子，不难发现&lt;/p>
&lt;ol>
&lt;li>函数签名以&lt;code>Java_&lt;/code>为前缀&lt;/li>
&lt;li>前缀后面跟着类的全路径，也就是包含包名和类名&lt;/li>
&lt;li>以&lt;code>_&lt;/code>作为路径分隔符&lt;/li>
&lt;li>函数的第一个参数永远是&lt;code>JNIEnv *&lt;/code>类型，第二个参数根据函数类型的不同而不同，&lt;code>static&lt;/code>类型的方法，对应的是&lt;code>jclass&lt;/code>类型，否则对应的是&lt;code>jobject&lt;/code>类型。类型系统后面会详细展开。&lt;/li>
&lt;/ol>
&lt;p>为什么Java方法对应到C/C++函数后，会多两个参数呢。我们知道JVM是多线程的，而我们的JNI方法可以在任何线程调用，那么怎样保证调用前后JVM能找到对应的线程呢，这就是函数第一个参数的作用，它是对线程环境的一种封装，和线程一一对应，也就是说不能用一个线程的&lt;code>JNIEnv&lt;/code>对象在另一个线程里使用。另外，它是一个C/C++访问Java世界的窗口，JNI开发的绝大部分时间都是和&lt;code>JNIEnv&lt;/code>打交道。&lt;/p>
&lt;h2 id="动态注册">动态注册&lt;/h2>
&lt;p>同样按照开发过程，我们一步一步来完成。
我们把前面的&lt;code>Java_me_hongui_demo_Test_jniString&lt;/code>函数名改成&lt;code>jniString&lt;/code>（当然不改也可以，毕竟没限制），参数列表保持不变，这时，我们就会发现Java文件报错了，说本地方法未实现。其实我们是实现了的，只是JVM找不到。为了让JVM能找到，我们需要向JVM注册。
那么怎么注册，在哪注册呢，似乎哪里都可以，又似乎都不可以。
前面说过，JVM只会查找通过&lt;code>System.loadLibrary(“xxx”); &lt;/code>加载的库，所以要想使用native方法，首先要先加载包含该方法的库文件，之后，才可使用。加载了库，说明Java程序要开始使用本地方法了。在加载库之后，调用方法之前，理论上都是可以注册方法的，但是时机怎么确定呢，JNI早就给我们安排好了。JVM在把库加载进虚拟机后，会调用函数&lt;code>jint JNI_OnLoad(JavaVM *vm, void *reserved)&lt;/code>，以确认JNI的版本，版本信息会以返回值的形式传递给JVM，目前可选的值有&lt;code>JNI_VERSION_1_1&lt;/code>,&lt;code>JNI_VERSION_1_2&lt;/code>,&lt;code>JNI_VERSION_1_4&lt;/code>,&lt;code>JNI_VERSION_1_6&lt;/code>。假如库没有定义这个函数，那么默认返回的是&lt;code>JNI_VERSION_1_1&lt;/code>，库将会加载失败，所以，为了支持最新的特性我们通常返回较高的版本。既然有了这么好的注册时机，那么下一步就是实现注册了。&lt;/p>
&lt;p>但事情并没有这么简单。由&lt;code>JNI_OnLoad&lt;/code>函数参数列表可知，目前，可供使用的只有JVM，但是查阅JVM的API，我们并没有发现注册的函数——注册函数是写在&lt;code>JNIEnv&lt;/code>类里面的。恰巧的是，JVM提供了获取&lt;code>JNIEnv&lt;/code>对象的函数。&lt;/p>
&lt;p>JVM有多个和&lt;code>JNIEnv&lt;/code>相关的函数，在Android开发中，我们需要使用&lt;code>AttachCurrentThread&lt;/code>来获取&lt;code>JNIEnv&lt;/code>对象，这个函数会返回执行状态，当返回值等于&lt;code>JNI_OK&lt;/code>的时候，说明获取成功。有了&lt;code>JNIEnv&lt;/code>对象，我们就可以注册函数了。&lt;/p>
&lt;p>先来看看注册函数的声明——&lt;code>jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,jint nMethods&lt;/code>。返回值不用多说，和&lt;code>AttachCurrentThread&lt;/code>一样，指示执行状态。难点在参数上，第一个参数是&lt;code>jclass&lt;/code>类型，第二个是&lt;code>JNINativeMethod&lt;/code>指针，都是没见过的主。&lt;/p>
&lt;p>为什么需要这么多参数呢，JVM不只需要一个函数指针吗。还是唯一性的问题，记得前面的静态注册吗，静态注册用全限定类型和方法，参数列表，返回值的组合确定了函数的唯一性。但是对于动态注册，这些都是未知的，但是又是必须的。为了确定这些值，只能通过其他的方式。&lt;code>jclass&lt;/code>就是限定方法的存在范围，获取&lt;code>jclass&lt;/code>对象的方式也很简单，使用&lt;code>JNIEnv&lt;/code>的&lt;code>jclass FindClass(const char* name)&lt;/code>函数。参数需要串全限定符的类名，并且把&lt;code>.&lt;/code>换成&lt;code>/&lt;/code>，也就是类似&lt;code>me/hongui/demo/Test&lt;/code>的形式，为啥这样写，后面会单独拿一节出来细说。&lt;/p>
&lt;p>第二个和第三个参数组合起来就是常见的数组参数形式。先来看看&lt;code>JNINativeMethod&lt;/code>的定义。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">typedef&lt;/span> &lt;span style="color:#000;font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#458;font-weight:bold">char&lt;/span> &lt;span style="color:#000;font-weight:bold">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#458;font-weight:bold">char&lt;/span> &lt;span style="color:#000;font-weight:bold">*&lt;/span>signature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#000;font-weight:bold">*&lt;/span>fnPtr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} JNINativeMethod;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有个编写诀窍，按定义顺序，相关性是从Java端转到C/C++端，怎么理解呢？&lt;code>name&lt;/code>是只的Java端对应的&lt;code>native&lt;/code>函数的名字，这是纯Java那边的事，Java那边取啥名，这里就是啥名。第二个&lt;code>signature&lt;/code>代表函数签名，签名信息由参数列表和返回值组成，形如&lt;code>(I)Ljava/lang/String;&lt;/code>,这个签名就是和两边都有关系了。首先Java那边的&lt;code>native&lt;/code>方法定义了参数列表和返回值的类型，也就是限定了签名的形式。其次Java的数据类型对应C/C++的转换需要在这里完成，也就是参数列表和返回值要写成C/C++端的形式，这就是和C/C++相关了。最后一个&lt;code>fnPtr&lt;/code>由名字也可得知它是一个函数指针，这个函数指针就是纯C/C++的内容了，代表着Java端的&lt;code>native&lt;/code>方法在C/C++对应的实现，也就是前文所说的跳转指针的。知道了这些，其实我们还是写不出代码，因为，我们还有JNI的核心没有说到，那就是类型系统。&lt;/p>
&lt;h1 id="jni的类型系统">JNI的类型系统&lt;/h1>
&lt;p>由于涉及到Java和C/C++两个语言体系，JNI的类型系统很乱，但并非无迹可寻。首先需要明确的是，两端都有自己的类型系统，Java里的&lt;code>boolean&lt;/code>，&lt;code>int&lt;/code>，&lt;code>String&lt;/code>,C/C++的&lt;code>bool&lt;/code>,&lt;code>int&lt;/code>,&lt;code>string&lt;/code>等等，遗憾的是，它们并不一一对应。也就是说C/C++不能识别Java的类型。既然类型不兼容，谈何调用呢。这也就是JNI欲处理的问题。&lt;/p>
&lt;h2 id="jni类型映射">JNI类型映射&lt;/h2>
&lt;p>为了解决类型不兼容的问题，JNI引入了自己的类型系统，类型系统里定义了和C/C++兼容的类型，并且还对Java到C/C++的类型转换关系做了规定。怎么转换的呢，这里有个表&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Java类型&lt;/th>
&lt;th>C/C++类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>boolean&lt;/td>
&lt;td>jboolean&lt;/td>
&lt;td>unsigned 8 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>byte&lt;/td>
&lt;td>jbyte&lt;/td>
&lt;td>signed 8 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>jchar&lt;/td>
&lt;td>unsigned 16 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>jshort&lt;/td>
&lt;td>signed 16 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>jint&lt;/td>
&lt;td>signed 32 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>jlong&lt;/td>
&lt;td>signed 64 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>jfloat&lt;/td>
&lt;td>32 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>jdouble&lt;/td>
&lt;td>64 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void&lt;/td>
&lt;td>void&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>乍一看，没什么特别的，不过就是加了&lt;code>j&lt;/code>前缀（除了&lt;code>void&lt;/code>)，但是，这只是基本类型，我们应该没忘记Java是纯面向对象的语言吧。各种复杂对象才是Java的主战场啊。而对于复杂对象，情况就复杂起来了。我们知道在Java中，任何对象都是&lt;code>Object&lt;/code>类的子类。那么我们是否可以把除上面的基本类型以外的所有复杂类型都当作&lt;code>Object&lt;/code>类的对象来处理呢，可是可以，但是不方便,像数组，字符串，异常等常用类，假如不做转换使用起来比较繁琐。为了方便我们开发，JNI又将复杂类型分为下面这几种情况&lt;/p>
&lt;pre tabindex="0">&lt;code>jobject (所有的Java对象)
|
|--jclass (java.lang.Class)
|--jstring (java.lang.String)
|--jarray (数组)
| |
| |-- jobjectArray (Object数组)
| |-- jbooleanArray (boolean数组)
| |-- jbyteArray (byte数组)
| |-- jcharArray (char数组)
| |-- jshortArray (short数组)
| |-- jintArray (int数组)
| |-- jlongArray (long数组)
| |-- jfloatArray (float数组)
| |-- jdoubleArray (double数组)
|--jthrowable (java.lang.Throwable异常)
&lt;/code>&lt;/pre>&lt;p>两个表合起来就是Java端到C/C++的类型转换关系了。也就是说，当我们在Java里声明&lt;code>native&lt;/code>代码时，&lt;code>native&lt;/code>函数参数和返回值的对应关系，也是C/C++调用Java代码参数传递的对应关系。但是毕竟两套系统还是割裂的，类型系统只定义了兼容方式，并没有定义转换方式，双方的参数还是不能相互识别，所以，JNI又搞了个类型签名，欲处理类型的自动转换问题。&lt;/p>
&lt;h2 id="jni的类型签名">JNI的类型签名&lt;/h2>
&lt;p>类型签名和类类型映射类似，也有对应关系，我们先来看个对应关系表&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型签名&lt;/th>
&lt;th>Java类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Z&lt;/td>
&lt;td>boolean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>char&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S&lt;/td>
&lt;td>short&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>J&lt;/td>
&lt;td>long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>D&lt;/td>
&lt;td>double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>L fully-qualified-class ;&lt;/td>
&lt;td>fully-qualified-class&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[type&lt;/td>
&lt;td>type[]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(arg-types)ret-type&lt;/td>
&lt;td>method type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>对于基本类型，也很简单，就是取了首字母，除了&lt;code>boolean&lt;/code>(首字母被&lt;code>byte&lt;/code>占用了)，&lt;code>long&lt;/code>（字母被用作了符合对象的前缀标识符）。
着重需要注意的是复合类型，也就是某个类的情况。&lt;em>&lt;strong>它的签名包含三部分，前缀&lt;code>L&lt;/code>，中间是类型的全限定名称，跟上后缀&lt;code>;&lt;/code>,三者缺一不可,并且限定符的分隔符要用/替换, 。 注意，类型签名和类型系统不是一个概念。类型通常是纯字符串的，用在函数注册等地方，被JVM使用的。类型系统是和普通类型一样的，可以定义变量，作为参数列表，被用户使用的。 另外，数组对象也有自己的类型签名，也是有着类型前缀&lt;code>[&lt;/code>，后面跟着类型的签名。最后的方法类型，也就是接下来我们着重要讲的地方，它也是由三部分组成&lt;code>()&lt;/code>和包含在&lt;code>()&lt;/code>里面的参数列表，&lt;code>()&lt;/code>后面的返回值。这里用到的所有类型，都是指类型签名。&lt;/strong>&lt;/em>&lt;/p>
&lt;p>我们来看个例子&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#458;font-weight:bold">long&lt;/span> &lt;span style="color:#900;font-weight:bold">f&lt;/span> (&lt;span style="color:#458;font-weight:bold">int&lt;/span> n, String s, boolean[] arr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它的类型签名怎么写呢？我们来一步一步分析&lt;/p>
&lt;ol>
&lt;li>确定它在Java里面的类型，在表中找出对应关系，确定签名形式。&lt;/li>
&lt;li>用步骤1的方法确定它的组成部分的类型。&lt;/li>
&lt;li>将确定好的签名组合在一起&lt;/li>
&lt;/ol>
&lt;p>此例是方法类型，对应表中最后一项，所以签名形式为&lt;code>(参数)返回值&lt;/code>。该方法有三个参数，我们按照步骤1的方式逐一确定。&lt;/p>
&lt;ol>
&lt;li>&lt;code>int n&lt;/code>对应&lt;code>int&lt;/code>类型，签名是&lt;code>I&lt;/code>;&lt;/li>
&lt;li>&lt;code>String s&lt;/code>对应&lt;code>String&lt;/code>类型，是复合类型，对应表中倒数第三项，所以它的基本签名形式是&lt;code>L全限定名;&lt;/code>。而&lt;code>String&lt;/code>的全限定名&lt;code>java.lang.String&lt;/code>，用&lt;code>/&lt;/code>替换&lt;code>,&lt;/code>后变成&lt;code>java/lang/String&lt;/code>。按步骤3，将它们组合在一起就是&lt;code>Ljava/lang/String;&lt;/code>;&lt;/li>
&lt;li>&lt;code>boolean[] arr&lt;/code>对应数组类型，签名形式是&lt;code>[类型&lt;/code>，&lt;code>boolean&lt;/code>的签名是&lt;code>Z&lt;/code>。组合在一起就是&lt;code>[Z&lt;/code>;&lt;/li>
&lt;li>最后来看返回值，返回值是&lt;code>long&lt;/code>类型，签名形式是&lt;code>J&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>按照签名形式将这些信息组合起来就是&lt;code>(ILjava/lang/String;[Z)J&lt;/code>，&lt;em>&lt;strong>注意类型签名和签名之间没有任何分割符，也不需要，类型签名是紧密排列的&lt;/strong>&lt;/em>。&lt;/p>
&lt;h1 id="再看动态注册">再看动态注册&lt;/h1>
&lt;p>有了JNI的类型系统的支持，回过头来接着看动态注册的例子，让我们接着完善它。&lt;/p>
&lt;ol>
&lt;li>用JVM对象获取&lt;code>JNIEnv&lt;/code>对象，即&lt;code>auto status=vm-&amp;gt;AttachCurrentThread(&amp;amp;jniEnv, nullptr);&lt;/code>&lt;/li>
&lt;li>用步骤1获取的&lt;code>JNIEnv&lt;/code>对象获取&lt;code>jclass&lt;/code>对象，即&lt;code>auto cls=jniEnv-&amp;gt;FindClass(&amp;quot;me/hongui/demo/Test&amp;quot;);&lt;/code>&lt;/li>
&lt;li>定义&lt;code>JNINativeMethod&lt;/code>数组，即&lt;code>JNINativeMethod methods[]={{&amp;quot;jniString&amp;quot;, &amp;quot;()Ljava/lang/String;&amp;quot;,reinterpret_cast&amp;lt;void *&amp;gt;(jniString)}};&lt;/code>，这里的方法签名可以参看上一节。&lt;/li>
&lt;li>调用&lt;code>JNIEnv&lt;/code>的&lt;code>RegisterNatives&lt;/code>函数。即&lt;code>status=jniEnv-&amp;gt;RegisterNatives(cls,methods,sizeof(methods)/sizeof(methods[0]));&lt;/code>。&lt;/li>
&lt;li>当然，别忘了实现对应的&lt;code>native&lt;/code>函数，即这里的&lt;code>jniString&lt;/code>——&lt;code>JNINativeMethod&lt;/code>的第三个参数。&lt;/li>
&lt;/ol>
&lt;p>这五步就是动态注册中&lt;code>JNI_OnLoad&lt;/code>函数的实现模板了，主要的变动还是来自&lt;code>jclass&lt;/code>的获取参数和&lt;code>JNINativeMethod&lt;/code>的签名等，必须做到严格的一一对应。如下面的例子&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">extern&lt;/span> &lt;span style="color:#d14">&amp;#34;C&amp;#34;&lt;/span> jint JNI_OnLoad(JavaVM &lt;span style="color:#000;font-weight:bold">*&lt;/span>vm, &lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#000;font-weight:bold">*&lt;/span>reserved){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JNIEnv&lt;span style="color:#000;font-weight:bold">*&lt;/span> jniEnv&lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">auto&lt;/span> status&lt;span style="color:#000;font-weight:bold">=&lt;/span>vm&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>AttachCurrentThread(&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>jniEnv, &lt;span style="color:#000;font-weight:bold">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">if&lt;/span>(JNI_OK&lt;span style="color:#000;font-weight:bold">==&lt;/span>status){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JNINativeMethod methods[]&lt;span style="color:#000;font-weight:bold">=&lt;/span>{{&lt;span style="color:#d14">&amp;#34;jniString&amp;#34;&lt;/span>, &lt;span style="color:#d14">&amp;#34;()Ljava/lang/String;&amp;#34;&lt;/span>,&lt;span style="color:#000;font-weight:bold">reinterpret_cast&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#000;font-weight:bold">*&amp;gt;&lt;/span>(jniString)}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">auto&lt;/span> cls&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>FindClass(&lt;span style="color:#d14">&amp;#34;me/hongui/demo/Test&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>RegisterNatives(cls,methods,&lt;span style="color:#000;font-weight:bold">sizeof&lt;/span>(methods)&lt;span style="color:#000;font-weight:bold">/&lt;/span>&lt;span style="color:#000;font-weight:bold">sizeof&lt;/span>(methods[&lt;span style="color:#099">0&lt;/span>]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">if&lt;/span>(JNI_OK&lt;span style="color:#000;font-weight:bold">==&lt;/span>status) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">return&lt;/span> JNI_VERSION_1_6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">return&lt;/span> JNI_VERSION_1_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="在jni中使用数据">在JNI中使用数据&lt;/h1>
&lt;p>前面磨磨唧唧说了这么一大片，其实才讲了一个问题——怎么找到。虽然繁杂，但好在有迹可循，大不了运行奔溃。下面要讲的这个问题就棘手多了，需要一点点耐性和细心。这一部分也可以划分成两个小问题——***访问已知对象的数据，创建新对象。有一点还是要提一下，这里的访问还创建都是针对Java程序而言的，也就是说，对象是存在JVM虚拟机的堆上的，我们的操作都是基于堆对象的操作。***而在C/C++的代码里，操作堆对象的唯一途径就是通过&lt;code>JNIenv&lt;/code>提供的方法。所以，这部分其实就是对&lt;code>JNIenv&lt;/code>方法的应用讲解。&lt;/p>
&lt;h2 id="java对象的访问">Java对象的访问&lt;/h2>
&lt;p>在面向对象的世界中，我们说访问对象，通常指两个方面的内容，访问对象的属性、调用对象的方法。这些操作在Java世界中，很好实现，但是在C/C++世界却并非如此。在JNI的类型系统那一节，我们也了解到，Java中的复杂对象在C/C++中都对应着&lt;code>jobject&lt;/code>这个类，显然，无论Java世界中，那个对象如何牛逼，在C/C++中都是一视同仁的。为了实现C/C++访问Java的复杂对象，结合访问对象的方式，&lt;code>JNIEnv&lt;/code>提供了两大类方法，一类是对应属性的，一类是对应方法的。借助&lt;code>JNIEnv&lt;/code>，C/C++就能实现访问对象的目标了。而且它们还有一个较为统一的使用步骤：&lt;/p>
&lt;ol>
&lt;li>根据要访问的内容准备好对应id（fieldid或者methodid）。&lt;/li>
&lt;li>确定访问的对象和调用数据&lt;/li>
&lt;li>通过&lt;code>JNIEnv&lt;/code>的方法调用完成对象访问&lt;/li>
&lt;/ol>
&lt;p>可以看出来，这使用步骤和普通面向对象的方式多了一些准备阶段（步骤1，2）。之前提到过，这部分的内容需要的更多的是耐心和细心，不需要多少酷炫的操作，毕竟发挥空间也有限。这具体也体现在上面的步骤1，2。正是这个准备阶段让整个C/C++的代码变得丑陋和脆弱，但是——又不是不能用，是吧。&lt;/p>
&lt;p>看一个例子，Java里定义了一个&lt;code>Person&lt;/code>类，类定义如下&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">public&lt;/span> &lt;span style="color:#000;font-weight:bold">class&lt;/span> &lt;span style="color:#900;font-weight:bold">Person&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">private&lt;/span> &lt;span style="color:#458;font-weight:bold">int&lt;/span> age&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">private&lt;/span> String name&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">public&lt;/span> &lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">setName&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>String name&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">name&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>name&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，我们在C/C++代码里该怎么访问这个类的对象呢。假定需要读取这个对象的&lt;code>age&lt;/code>值，设置这个对象的&lt;code>name&lt;/code>值。根据上面的步骤，我们有以下步骤&lt;/p>
&lt;ol>
&lt;li>准备好&lt;code>age&lt;/code>的&lt;code>fieldid&lt;/code>,&lt;code>setName&lt;/code>的&lt;code>methodid&lt;/code>。根据&lt;code>JNIEnv&lt;/code>的方法，我们可以看到四个相关的，&lt;code>fieldid&lt;/code>,&lt;code>methodid&lt;/code>各两个，分普通的和静态的。我们这里都是普通的，所以确定的方法是&lt;code>GetFieldID&lt;/code>和&lt;code>GetMethodID&lt;/code>。第一个参数就是&lt;code>jclass&lt;/code>对象，获取方法前面已经说过,即通过&lt;code>JNIEnv&lt;/code>的&lt;code>FindClass&lt;/code>方法，参数是全限定类名，以&lt;code>/&lt;/code>替换&lt;code>.&lt;/code>。后面两个参数对应Java端的名称和类型签名，&lt;code>age&lt;/code>属于field，&lt;code>int&lt;/code>的类型签名是&lt;code>I&lt;/code>，&lt;code>setName&lt;/code>属于method，签名形式是&lt;code>(参数)返回值&lt;/code>，这里参数的签名是&lt;code>Ljava/lang/String;&lt;/code>，返回值的签名是&lt;code>V&lt;/code>，组合起来就是&lt;code>&amp;quot;(Ljava/lang/String;)V&amp;quot;&lt;/code>。&lt;/li>
&lt;li>假定我们已经有了&lt;code>Person&lt;/code>对象&lt;code>obj&lt;/code>,通过Java传过来的。&lt;/li>
&lt;li>分别需要调用两个方法，&lt;code>age&lt;/code>是整形属性，要获取它的值，对应就需要使用&lt;code>GetIntField&lt;/code>方法。&lt;code>setName&lt;/code>是返回值为&lt;code>void&lt;/code>的方法。所以应该使用&lt;code>CallVoidMethod&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>通过上面的分析，得出下面的示例代码。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> cls&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>FindClass(&lt;span style="color:#d14">&amp;#34;me/hongui/demo/Person&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> ageId&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>GetFieldID(cls,&lt;span style="color:#d14">&amp;#34;age&amp;#34;&lt;/span>,&lt;span style="color:#d14">&amp;#34;I&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> nameId&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>GetMethodID(cls,&lt;span style="color:#d14">&amp;#34;setName&amp;#34;&lt;/span>,&lt;span style="color:#d14">&amp;#34;(Ljava/lang/String;)V&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jint age&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>GetIntField(obj,ageId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> name&lt;span style="color:#000;font-weight:bold">=&lt;/span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>NewStringUTF(&lt;span style="color:#d14">&amp;#34;张三&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jniEnv&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>CallVoidMethod(obj,nameId,name);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从上面的分析和示例来看，耐心和细心主要体现在&lt;/p>
&lt;ol>
&lt;li>对要访问的属性或者方法要耐心确定类型和名称，并且要保持三个步骤中的类型要一一对应。即调用&lt;code>GetFieldID&lt;/code>的类型要以&lt;code>GetXXXField&lt;/code>的类型保持一致，方法也是一样。&lt;/li>
&lt;li>对属性或方法的静态非静态修饰也要留心，通常静态的都需要使用带有&lt;code>static&lt;/code>关键字的方法，普通的则不需要。如&lt;code>GetStaticIntField&lt;/code>就是对应获取静态整型属性的值，而&lt;code>GetIntField&lt;/code>则是获取普通对象的整型属性值。&lt;/li>
&lt;li>属性相关的设置方法都是类似于&lt;code>SetXField&lt;/code>的形式，里面的&lt;code>X&lt;/code>代表着具体类型，和前面的类型系统中的类型一一对应，假如是复杂对象，则用&lt;code>Object&lt;/code>表示，如&lt;code>SetObjectField&lt;/code>。而访问属性只需要将前缀&lt;code>Set&lt;/code>换成&lt;code>Get&lt;/code>即可。对于静态属性，则是在&lt;code>Set&lt;/code>和&lt;code>X&lt;/code>之间加上固定的&lt;code>Static&lt;/code>，即&lt;code>SetStaticIntField&lt;/code>这种形式。&lt;/li>
&lt;li>方法调用则是以&lt;code>Call&lt;/code>为前缀，后面跟着返回值的类型，形如&lt;code>CallXMethod&lt;/code>的形式。这里&lt;code>X&lt;/code>代表返回值。如&lt;code>CallVoidMethod&lt;/code>就表示调用对象的某个返回值为&lt;code>void&lt;/code>类型的方法。同样对应的静态方法则是在&lt;code>Call&lt;/code>和&lt;code>X&lt;/code>之间加上固定的&lt;code>Static&lt;/code>,如&lt;code>CallStaticVoidMethod&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h2 id="向java世界传递数据">向Java世界传递数据&lt;/h2>
&lt;p>向Java世界传递数据更需要耐心。因为我们需要不断地构造对象，组合对象，设置属性。而每一种都是上面Java对象的访问的一种形式。&lt;/p>
&lt;h3 id="构造java对象">构造Java对象&lt;/h3>
&lt;p>C/C++构造Java对象和调用方法类似。但是，还是有很多值得关注的细节。根据前面的方法，我们构造对象，首先要知道构造方法的id，而得到id，我们需要得到&lt;code>jclass&lt;/code>，构造方法的名字和签名。我们知道在Java世界里，构造方法是和类同名的，但是在C/C++里并不是这样，它有着特殊的名字——&lt;code>&amp;lt;init&amp;gt;&lt;/code>，注意，这里的&lt;code>&amp;lt;&amp;gt;&lt;/code>不能少。***也就是说无论这个类叫什么，它的构造函数的名字都是&lt;code>&amp;lt;init&amp;gt;&lt;/code>。***而函数签名的关键点在于返回值，构造方法的返回值都是&lt;code>void&lt;/code>也就是对应签名类型&lt;code>V&lt;/code>。&lt;/p>
&lt;p>接前面那个&lt;code>Person&lt;/code>类的例子，要怎样构造一个&lt;code>Person&lt;/code>对象呢。&lt;/p>
&lt;ol>
&lt;li>通过&lt;code>JNIEnv&lt;/code>的&lt;code>FindClass&lt;/code>得到就&lt;code>jclass&lt;/code>对象。记得将&lt;code>'&lt;/code>替换成&lt;code>/&lt;/code>。&lt;/li>
&lt;li>根据需要得到合适的构造方法的id。我没有定义构造方法，那么编译器会为它提供一个无参的构造方法。也就是函数签名为&lt;code>()V&lt;/code>。调用&lt;code>JNIEnv&lt;/code>的&lt;code>GetMethodID&lt;/code>得到id。&lt;/li>
&lt;li>调用&lt;code>JNIEnv&lt;/code>的&lt;code>NewObject&lt;/code>创建对象，记得传递构造参数。我这里不需要传递。&lt;/li>
&lt;/ol>
&lt;p>综上分析，这个创建过程类似于如下示例&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> cls&lt;span style="color:#000;font-weight:bold">=&lt;/span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>FindClass(&lt;span style="color:#d14">&amp;#34;me/hongui/demo/Person&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> construct&lt;span style="color:#000;font-weight:bold">=&lt;/span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>GetMethodID(cls,&lt;span style="color:#d14">&amp;#34;&amp;lt;init&amp;gt;&amp;#34;&lt;/span>,&lt;span style="color:#d14">&amp;#34;()V&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> age&lt;span style="color:#000;font-weight:bold">=&lt;/span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>GetFieldID(cls,&lt;span style="color:#d14">&amp;#34;age&amp;#34;&lt;/span>,&lt;span style="color:#d14">&amp;#34;I&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> name&lt;span style="color:#000;font-weight:bold">=&lt;/span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>GetFieldID(cls,&lt;span style="color:#d14">&amp;#34;name&amp;#34;&lt;/span>,&lt;span style="color:#d14">&amp;#34;Ljava/lang/String;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> p&lt;span style="color:#000;font-weight:bold">=&lt;/span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>NewObject(cls,construct);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">auto&lt;/span> nameValue&lt;span style="color:#000;font-weight:bold">=&lt;/span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>NewStringUTF(&lt;span style="color:#d14">&amp;#34;张三&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>SetIntField(p,age,&lt;span style="color:#099">18&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>env&lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span>SetObjectField(p,name,nameValue);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">return&lt;/span> p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的示例有个有意思的点，其实示例中创建了两个Java对象，一个是&lt;code>Person&lt;/code>对象，另一个是&lt;code>String&lt;/code>对象。因为在编程中，&lt;code>String&lt;/code>出境的概率太大了，所以JNI提供了这个简便方法。同样特殊的还有数组对象的创建。并且因为数组类型不确定，还有多个版本的创建方法，如创建整型数组的方法是&lt;code>NewIntArray&lt;/code>。方法签名也很有规律，都是&lt;code>NewXArray&lt;/code>的形式，其中&lt;code>X&lt;/code>代表数组的类型，这些方法都需要一个参数，即数组大小。既然提到了数组，那么数组的设置方法就不得不提。设置数组元素的值也有对应的方法，形如&lt;code>SetXArrayRegion&lt;/code>，如&lt;code>SetIntArrayRegion&lt;/code>就是设置整型数组元素的值。和Java世界不同的是，这些方法都是支持同时设置多个值的。整形数组的签名是这样——&lt;code>void SetIntArrayRegion(jintArray array,jsize start, jsize len,const jint* buf)&lt;/code>第二个参数代表设置值的开始索引，第三个参数是数目，第四个参数是指向真正值的指针。其余类型都是类似的。&lt;/p>
&lt;h2 id="让数据访问更进一步">让数据访问更进一步&lt;/h2>
&lt;p>有些时候，我们不是在调用&lt;code>native&lt;/code>方法时访问对象，而是在将来的某个时间。这在Java世界很好实现，总能找到合适的类存放这个调用时传递进来的对象引用，在后面使用时直接用就可以了。&lt;code>native&lt;/code>世界也是这样吗？从使用流程上是一样的，但是从实现方式上却是很大不同。&lt;/p>
&lt;p>Java世界是带有GC的，也就是说，将某个临时对象&lt;code>X&lt;/code>传递给某个对象&lt;code>Y&lt;/code>之后，&lt;code>X&lt;/code>的生命周期被转移到了&lt;code>Y&lt;/code>上了，&lt;code>X&lt;/code>不会在调用结束后被销毁，而是在&lt;code>Y&lt;/code>被回收的时候才会一同回收。这种方式在纯Java的世界里没有问题,但是当我们把这个临时对象&lt;code>X&lt;/code>传递给&lt;code>native&lt;/code>世界，试图让它以Java世界那样工作时，应用却崩溃了，报错&lt;code>JNI DETECTED ERROR IN APPLICATION: native code passing in reference to invalid stack indirect reference table or invalid reference: 0xxxxx&lt;/code>。为什么同样的操作在Java里面可以，在&lt;code>native&lt;/code>却不行呢。问题的根源就是Java的GC。GC可以通过各种垃圾检测算法判断某个对象是否需要标记为垃圾。而在&lt;code>native&lt;/code>世界，不存在GC，为了不造成内存泄漏，只能采取最严格的策略，&lt;strong>默认调用&lt;code>native&lt;/code>方法的地方就是使用Java对象的地方&lt;/strong>。所以在&lt;code>native&lt;/code>方法调用的作用域结束后，临时对象就被GC标记为垃圾，后面想再使用，可能已经被回收了。还好，强大的&lt;code>JNIEnv&lt;/code>类同样提供了方法让我们改变这种默认策略——&lt;code>NewGlobalRef&lt;/code>。对象只需要通过这种方式告诉JVM，它想活得更久一点，JVM在执行垃圾检测的时候就不会把它标记为垃圾，这个对象就会一直存。在，直到调用&lt;code>DeleteGlobalRef&lt;/code>。&lt;em>&lt;strong>这里&lt;code>NewGlobalRef&lt;/code>，&lt;code>DeleteGlobalRef&lt;/code>是一一对应的，而且最好是再不需要对象的时候就调用&lt;code>DeleteGlobalRef&lt;/code>释放内存，避免内存泄漏。&lt;/strong>&lt;/em>&lt;/p>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>&lt;em>&lt;strong>JNI开发会涉及到Java和C/C++开发的知识，在用C/C++实现JNI时，基本思想就是用C/C++语法写出Java的逻辑，也就是一切为Java服务。JNI开发过程中，主要要处理两个问题，函数注册和数据访问。&lt;/strong>&lt;/em>&lt;/p>
&lt;p>函数注册推荐使用动态注册，在&lt;code>JNI_OnLoad&lt;/code>函数中使用&lt;code>JNIEnv&lt;/code>的&lt;code>RegisterNatives&lt;/code>注册函数，注意保持Java的&lt;code>native&lt;/code>方法和类型签名的一致性，复合类型不要忘记前缀&lt;code>L&lt;/code>、后缀&lt;code>;&lt;/code>，并将&lt;code>.&lt;/code>替换为&lt;code>/&lt;/code>。&lt;/p>
&lt;p>数据访问首先需要确定访问周期，需要在多个地方或者不同时间段访问的对象，记得使用&lt;code>NewGlobalRef&lt;/code>阻止对象被回收，当然还要记得&lt;code>DeleteGlobalRef&lt;/code>。访问对象需要先拿到相应的id，然后根据访问类型确定访问方法。设置属性通常是&lt;code>SetXField&lt;/code>的形式，获取属性值通常是&lt;code>GetXField&lt;/code>的形式。调用方法，需要根据返回值的类型确定调用方法，通常是&lt;code>CallXMethod&lt;/code>的形式。当然，这些都是针对普通对象的，假如需要访问静态属性或者方法，则是在普通版本的&lt;code>X&lt;/code>前面加上&lt;code>Static&lt;/code>。这里的所有&lt;code>X&lt;/code>都是指代类型，除了基本类型外，其他对象都用&lt;code>Object&lt;/code>替换。&lt;/p>
&lt;p>在注册函数和访问数据的时候需要时刻关注的就是数据类型。C/C++数据类型除了基本类型外都不能直接传递到Java里，需要通过创建对象的方式传递。一般的创建对象方式&lt;code>NewObject&lt;/code>可以创建任何对象，而对于使用频繁的字符串和数组有对应的快速方法&lt;code>NewStringUTF&lt;/code>，&lt;code>NewXArray&lt;/code>。向Java传递字符串和数组，这两个方法少不了。&lt;/p>
&lt;p>青山不改，绿水长流，咱们下期见！&lt;/p></description></item><item><title>CMake个人理解和使用</title><link>https://hongui.github.io/post/CMake%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8.html</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://hongui.github.io/post/CMake%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8.html</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>CMake是一个构建工具，通过它可以很容易创建跨平台的项目。通常使用它构建项目要分两步，通过源代码生成工程文件，通过工程文件构建目标产物（可能是动态库，静态库，也可能是可执行程序）。使用CMake的一个主要优势是在多平台或者多人协作的项目中，开发人员可以根据自己的喜好来使选择IDE，不用受其他人工程配置的影响，它有点像跨平台的IDE，通过它配置好相关设置之后，可以在多个平台无缝衔接，提高开发效率。&lt;/p>
&lt;h1 id="最简单的cmake工程">最简单的CMake工程&lt;/h1>
&lt;h2 id="项目搭建">项目搭建&lt;/h2>
&lt;p>一个用CMake来管理的项目，其项目根目录通常会包含一个&lt;code>CMakeLists.txt&lt;/code>的文件，当然子目录可能也有，这种情况我们稍后再说。我们先从最简单的项目开始。以下就是一个最简单的工程示例：&lt;/p>
&lt;pre tabindex="0">&lt;code>CMakeProject
| CMakeLists.txt
| main.cpp
&lt;/code>&lt;/pre>&lt;p>这就是完整的可以跑起来的最小项目了。按照顺序，我们来看看文件里的内容&lt;/p>
&lt;p>&lt;code>CMakeLists.txt&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code># 设置版本号
cmake_minimum_required(VERSION 3.10)
# 设置项目名
project(CMakeProject)
# 设置产物和源码的关联
add_executable(${CMAKE_PROJECT_NAME} main.cpp)
&lt;/code>&lt;/pre>&lt;p>说明：&lt;/p>
&lt;ul>
&lt;li>CMake中命令不区分大小写&lt;/li>
&lt;li>以&lt;code>#&lt;/code>开始的是备注&lt;/li>
&lt;li>引用变量语法&lt;code>${变量名}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>所以文档中真正的有效内容就三行，&lt;/p>
&lt;ol>
&lt;li>&lt;code>cmake_minimum_required(VERSION 3.10)&lt;/code>设置了CMake支持的最低版本，&lt;code>VERSION&lt;/code>是参数名，后面是版本号，可以根据自己的需要修改。 &lt;strong>注意参数名和参数是以空白符分隔的，不是逗号，&lt;/strong> 不然会报错。&lt;/li>
&lt;li>&lt;code>project(CMakeProject)&lt;/code>CMake中字符串可以带引号或者不带，效果是一致的，这一行就是配置了项目名，如生成的Visual Studio的工程名就是依据这个名字来的。&lt;/li>
&lt;li>&lt;code>add_executable(${CMAKE_PROJECT_NAME} main.cpp)&lt;/code>
才是真正管理源码和目标产物的地方，这里我们使用了引用变量的写法，而文件中没有定义这个变量，说明这个变量存在于CMake中，在CMake还有很多预定义的变量，我们可以直接通过这种方式引用，上面的写法是将项目名设置为产物的名字，当然也可以直接填字符串，取个另外的名字都是可以的。后面的&lt;code>main.cpp&lt;/code>则是用来生成产物的源码路径，这就是CMake最灵活的地方。&lt;strong>源码路径可以是多样的，查找出来的，直接写的，相对路径，绝对路径都可以。&lt;/strong> 多个源码的话就用空白符分隔，依次写就行了。
在上面的配置文件中，我们配置了它的源文件为&lt;code>main.cpp&lt;/code>，我们想通过它来生成一个可执行的程序，内容也很简单:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;iostream&amp;gt;
int main()
{
std::cout&amp;lt;&amp;lt;&amp;#34;hello CMake&amp;#34;&amp;lt;&amp;lt;std::endl;
return 0;
}
&lt;/code>&lt;/pre>&lt;h2 id="项目编译与执行">项目编译与执行&lt;/h2>
&lt;p>准备工作已经做完，接下来我们就要使用CMake生成可执行文件了。&lt;/p>
&lt;p>第一步当然是要安装CMake啦，这是下载地址&lt;a class="link" href="https://cmake.org/download/" target="_blank" rel="noopener"
>!Download&lt;/a>，根据自己的平台选择下载即可，安装完成之后需要把它添加到环境变量中，便于我们在任何地方都能方便使用。
安装了CMake以后，打开命令行工具，进入到刚才创建的项目根目录，也就是进入到存着&lt;code>CMakeLists.txt&lt;/code>和&lt;code>main.cpp&lt;/code>的目录，下一步准备生成项目。&lt;/p>
&lt;p>通常为了不影响和污染当前的工作环境，我们会选择新建一个目录来存放生成的工程文件，以下我主要以Windows平台为主要平台讲解，其他平台基本一致。&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir build #创建文件夹，存储工程文件；
cd build #切换cmake工作目录;
cmake .. #生成项目文件；
&lt;/code>&lt;/pre>&lt;p>这三步执行完后，我们就可以在build文件夹下看到里面已经生成了一个Visual Studio的工程，我们可以直接用Visual Studio打开这个工程，按照我们的习惯执行编译和调试。当然，假如想最快地生成可执行文件，我还是推荐使用CMake。&lt;/p>
&lt;p>使用CMake执行编译，只需要在上一步的基础上（也就是已经成功执行了上面的三个步骤）再执行一个命令&lt;code>cmake --build .&lt;/code>就可以了。这里切记不能少第三个英文句号，它代表在当前的工作目录中执行CMake的编译。
假如上面的四步都一切顺利的话，那么，我们就可以在&lt;code>build/debug&lt;/code>目录下看到以&lt;code>add_executable&lt;/code>的第一个参数命名的可执行文件（这里就是&lt;code>CMakeProject.exe&lt;/code>），双击或者把它拖到命令行就可以执行它了。&lt;/p>
&lt;h2 id="项目扩展">项目扩展&lt;/h2>
&lt;p>在前面的例子中，生成工程文件，我们使用了两个命令，其实，这里可以直接用一个命令就可以完成——&lt;code>cmake build -S . -B build&lt;/code>。这个命令的意思是以当前路径为工作路径，以&lt;code>build&lt;/code>目录为生成目录，生成工程文件，也就是不需要我们手动创建&lt;code>build&lt;/code>文件夹了。其中 &lt;code>-S&lt;/code>参数配置的是源路径，&lt;code>-B&lt;/code>配置的是生成路径。&lt;/p>
&lt;p>另外，由于CMake没有清理方法，所以每次修改CMake的配置（也就是新增或者删除&lt;code>CMakeLists.txt&lt;/code>中的代码），需要重新生成工程文件的时候，需要我们手动清理生成目录，保证它是空目录，假如不这样做，那么项目可能生成失败或者新配置不起作用。假如只是修改了源代码的内容的话，则不需要重新生成，直接进行第四步即可。
虽然上面的操作已经足够简单，但是考虑到长期的修改和验证需要，还是太繁琐枯燥了，尤其是要反复切换工作目录，还是比较烦人的。所以我推荐使用批处理来完成这些操作。结合清理生成目录和切换工作目录这几个步骤，最终的批处理文件可能是这样的&lt;/p>
&lt;pre tabindex="0">&lt;code>
@echo off
rd /s /q build
mkdir build
cd build
cmake ..
cmake --build .
cd debug
CMakeProject
cd ../..
&lt;/code>&lt;/pre>&lt;p>按顺序依次解释一下:&lt;/p>
&lt;p>第一行是关闭了命令行的回显功能，因为我们不希望它的回显干扰到CMake的信息输出，以造成不必要的混乱，而且通常我们也只关心它最后有没有完成工作而不是看它在干什么。&lt;/p>
&lt;p>第二行则是用了Windows上的删除文件夹命令（Linux，MacOS上对应的是rmdir),/s是配置它清除文件夹中所有的内容，包括子文件夹，不配置命令就会执行失败，/q则是让命令直接执行删除，不需要我们手动确认，这个参数很重要，不然我们需要一个一个地确认删除，完全失去了自动化的作用。然后后面的四句就是我们上面讲的内容了，不再赘述。&lt;/p>
&lt;p>一直来到倒数第二句，这里我直接写了可执行文件的名字（需要替换为你自己的名字），为的就是直接在编译完成之后运行可执行文件，这对有些会生成文件的应用来说很有用。&lt;/p>
&lt;p>执行结束后，再将目录切回到项目根目录，这就是最后一行的作用，由于我们再编译的时候已经切换了目录到生成目录了，而编译的可执行文件又是在生成目录的子目录中，所以回到根目录，我们需要回退两次，这是保证下次我们能胜利执行批处理的关键。&lt;/p>
&lt;p>把上面的内容保存为bat结尾的文件，然后下次就可以直接在命令行输入bat文件名来一次性完成生成和构建了，简直爽歪歪。
以上就是CMake项目我们所需要知道的了。当然实际项目远比这个复杂得多，接下来我将以我踩过的坑为基础，逐一增加项目的复杂度，慢慢形成对CMake的工作流程的理解。&lt;/p>
&lt;h1 id="多源码项目">多源码项目&lt;/h1>
&lt;h2 id="个人感悟">个人感悟&lt;/h2>
&lt;p>在开始之前，我先讲一讲我对CMake项目或者说&lt;code>CMakeLists.txt&lt;/code>文件的理解。&lt;strong>我们不能单独的以某一个配置为理解对象，我们需要对这些命令进行分类甚至提炼出它的核心工作模式。我是以c++文件的编译链接为线索梳理的。&lt;/strong> 我们都知道一个c++源文件要想生成可执行代码，需要分三步&lt;/p>
&lt;ul>
&lt;li>预处理器处理，拷贝头文件的内容到源文件，宏替换等；&lt;/li>
&lt;li>编译器将源文件编译为.o的对象文件；&lt;/li>
&lt;li>链接器以.o文件和其他库为输入，链接生成可执行文件。&lt;/li>
&lt;/ul>
&lt;p>我们按照这个思路来理解CMake就简单多了。假如CMake报错，我们就可以根据报错信息定位到是哪个阶段出了问题，进而快速找到解决办法。另外我们也可以依据这些信息对CMake的配置分类，我自己理解的粗略分类如下:&lt;/p>
&lt;ul>
&lt;li>配置CMake基本信息的：&lt;code>cmake_minimum_required&lt;/code>；&lt;/li>
&lt;li>源码管理的：&lt;code>file&lt;/code>,&lt;code>aux_source_directory&lt;/code>；&lt;/li>
&lt;li>库管理的：&lt;code>find_libraray&lt;/code>；&lt;/li>
&lt;li>头文件管理的：&lt;code>include_directories&lt;/code>；&lt;/li>
&lt;li>链接库管理的：&lt;code>link_directories&lt;/code>；&lt;/li>
&lt;li>子项目管理的：&lt;code>add_subdirectory&lt;/code>；&lt;/li>
&lt;li>生成物管理的：&lt;code>add_executable&lt;/code>,&lt;code>add_library&lt;/code>；&lt;/li>
&lt;/ul>
&lt;p>当然，这些只是很少的一部分，但是对我们理解和搜索问题的解决思路提供了较好的方向。&lt;/p>
&lt;h2 id="cmake管理子目录">CMake管理子目录&lt;/h2>
&lt;p>很多时候，我们会引入第三方包来减少重复编码的工作，通常这种代码我们需要放在其他目录中，于是我新建了一个子目录，用于模拟存放的第三方代码。对于这种情况，我们有两种包含形式——子模块和子目录。&lt;/p>
&lt;p>先说简单一些的子目录吧。子目录的意思就是将第三方代码看作我们代码的一部分，一起合并编译，这种方式可以使我们的项目看起来更紧凑。如以下的项目结构&lt;/p>
&lt;pre tabindex="0">&lt;code>CMakeProject
| auto.bat
| CMakeLists.txt //修改
| main.cpp //修改
|
\---3rd //新增
lib.h
&lt;/code>&lt;/pre>&lt;p>我新建了一个子文件夹，用来模拟第三方代码，现在我们把它引入到&lt;code>main.cpp&lt;/code>中，编译，就会发现报错了，信息为&lt;code>fatal error C1083: 无法打开包括文件: “lib.h”: No such file or directory，&lt;/code>这很正常。结合上面我举的例子。这个报错信息是和头文件相关的，查看CMake文档，我发现了CMake有个&lt;code>include_directories&lt;/code>的指令，它的意思就是添加文件头的目录，以便让CMake找到头文件。于是，我在&lt;code>CMakeLists.txt&lt;/code>文件中添加了&lt;code>include_directories(3rd)&lt;/code>，然后再次执行编译，项目又正确跑起来了。来看看这时的&lt;code>main.cpp&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;iostream&amp;gt;
#include &amp;lt;lib.h&amp;gt;
int main()
{
int a=1,b=1;
std::cout&amp;lt;&amp;lt;&amp;#34;hello CMake&amp;#34;&amp;lt;&amp;lt;std::endl;
std::cout&amp;lt;&amp;lt;&amp;#34;a + b = &amp;#34;&amp;lt;&amp;lt;sum(a,b)&amp;lt;&amp;lt;std::endl;
return 0;
}
&lt;/code>&lt;/pre>&lt;p>注意：这里的&lt;code>include_directories&lt;/code>和cpp中的&lt;code>include&lt;/code>是一一对应的，就是说，假如&lt;code>include_directories&lt;/code>里面配置的目录是.（当前目录，CMake没有把当前目录添加到&lt;code>include&lt;/code>路径），则对应cpp的&lt;code>include&lt;/code>要写成&lt;code>3rd/lib.h&lt;/code>这种形式，简单来说，就是&lt;code>include_directories&lt;/code>被设置为了&lt;code>include&lt;/code>的根目录。
另一种情况就是子模块。&lt;/p>
&lt;h2 id="cmake管理子模块">CMake管理子模块&lt;/h2>
&lt;p>子模块的意思是，模块可以单独编译，单独提供给其他库使用，而不是和主项目共生的，适用于和主模块耦合不大的情况。为了满足这个条件，我们修改刚才的目录结构为下面这种&lt;/p>
&lt;pre tabindex="0">&lt;code>CMakeProject
| auto.bat
| CMakeLists.txt //修改
| main.cpp
|
\---3rd
CMakeLists.txt //新增
lib.cpp //新增
lib.h //修改
&lt;/code>&lt;/pre>&lt;p>我把&lt;code>lib.h&lt;/code>中的函数改为声明，实现放在了&lt;code>lib.cpp&lt;/code>文件中。最大的变化是新建了&lt;code>3rd&lt;/code>目录下的&lt;code>CMakeLists.txt&lt;/code>文件，用它统一管理&lt;code>3rd&lt;/code>目录下的所有源文件（假如文件很多的话，这里是模拟）,使用了&lt;code>add_library&lt;/code>把&lt;code>3rd&lt;/code>目录下打包成了子模块。&lt;/p>
&lt;pre tabindex="0">&lt;code>project(sum)
add_library(${PROJECT_NAME} lib.cpp)
&lt;/code>&lt;/pre>&lt;p>&lt;code>add_library&lt;/code>在名字和源代码中间还可以指定构建类型，默认是&lt;code>STATIC&lt;/code>，也就是静态库，假如想构建动态库需要手动指定为&lt;code>SHARED&lt;/code>（&lt;code>add_library(${PROJECT_NAME} SHARED lib.cpp)&lt;/code>）。&lt;/p>
&lt;p>重要的改变来自主目录下的&lt;code>CMakeLists.txt&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code># 设置版本号
cmake_minimum_required(VERSION 3.10)
# 设置项目名
project(CMakeProject)
# 指定3rd为include的查找目录
include_directories(3rd)
# 子模块
add_subdirectory(3rd)
# 设置产物和源码的关联
add_executable(${PROJECT_NAME} main.cpp)
target_link_libraries(${PROJECT_NAME} sum)
&lt;/code>&lt;/pre>&lt;p>新增了&lt;code>add_subdirectory&lt;/code>，它的作用是将指定目录下的源码作为一个模块编译，前提是这个目录下要有&lt;code>CMakeLists.txt&lt;/code>文件。另一个改变就是&lt;code>target_link_libraries&lt;/code>的添加，它的作用是将子模块链接进主模块，假如没有这一句，在链接的时候会报错&lt;code>error LNK2019: 无法解析的外部符号&lt;/code>。模块的名字需要和子模块中&lt;code>add_library&lt;/code>中第一个参数保持一致。&lt;/p>
&lt;h1 id="交叉编译">交叉编译&lt;/h1>
&lt;p>在前面的示例中，项目的复杂度表现在多目录，多源码，而在使用CMake进行交叉编译的过程中，项目的主要复杂度表现在环境配置。尽管CMake可以几乎不修改&lt;code>CMakeLists.txt&lt;/code>的情况下，实现交叉编译，但是对于新手，面对陌生的配置，往往会无从下手，企图找到一键就完成配置的简便方法。对于CMake,确实没有这种快捷方法，但是，只要我们理解了&lt;strong>交叉编译就是正确配置属性值的过程。&lt;/strong> 这一实质之后，问题就会变得明朗起来。所以，上面的问题就会转化为我们熟悉的问题了——需要配置哪些属性，这些属性有哪些合适的值，这些值怎样传递给CMake等等，这就是交叉编译的全部了。正如之前提到的一样，CMake有很多预设的变量，我们需要从这些预设变量中找到一些，设置一些值，然后让CMake按照这些配置完成工作，这就是我们接下来需要做的事。下面我将以Windows交叉编译Android为例说明这个过程。&lt;/p>
&lt;h2 id="前期准备">前期准备&lt;/h2>
&lt;p>在Windows平台上，默认会使用Visual Studio作为C，C++的编译器，这对于编译Android的库来说可能会报错。所以在执行&lt;code>cmake&lt;/code>命令的时候，需要使用&lt;code> -G &amp;quot;Unix Makefiles&amp;quot;&lt;/code>来改变这一行为。但这还不够，因为CMake编译是需要指定编译器的。而Android上的C,C++编译器通常以NDK的方式提供，所以，我们需要下载好NDK。在NDK中，会同时为我们提供两种工具，一种就是编译器，另一种就是&lt;code>android.toolchain.cmake&lt;/code>,这也是CMake命令构成的文件，里面为我们交叉编译指定了很多预设值，能大大减轻我们的工作。&lt;/p>
&lt;h2 id="编写编译脚本">编写编译脚本&lt;/h2>
&lt;p>前面说了，交叉编译就是改变CMake预设值，而改变这预设值的方式有两种，我们要结合起来使用。一种是通过NDK提供的&lt;code>android.toolchain.cmake&lt;/code>文件。 &lt;code>android.toolchain.cmake&lt;/code>中以设置了绝大部分的值，但是这些配置也是很灵活的，还有很大的配置空间。因此，根据用户的需求不同，我们还需要在执行CMake命令时动态传递一些值，以使CMake能正确完成工作。这就是另一种方式——选项。传递选项会以&lt;code>-D&lt;/code>开头，后面跟着某个CMake的预定义变量由于选项很多，而且大多比较复杂，所以，最好还是通过脚本文件来记录并且修改。以下就是Windows平台上编译Android代码需要指定的几个选项，我将逐个介绍这些必要的配置。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-DCMAKE_SYSTEM_NAME=Android&lt;/code>这个配置是告诉CMake需要生成Android平台的库，也就是执行交叉编译。&lt;/li>
&lt;li>&lt;code>-DANDROID_ABI=x86&lt;/code>这个配置是告诉CMake生成库适用的架构平台。熟悉Android开发的读者应该不会陌生，支持的值会根据NDK的变化而有所变化，如早期的&lt;code>armeabi&lt;/code>已经在 NDK r17中移除了，现在主流的还有四种&lt;code>armeabi-v7a&lt;/code>，&lt;code>arm64-v8a&lt;/code>，&lt;code>x86&lt;/code>，&lt;code>x86_64&lt;/code>.根据需要把值替换就行。&lt;/li>
&lt;li>&lt;code>-DANDROID_PLATFORM=android-28&lt;/code>,这个值其实不是特别必要，因为有预设值，但是为了可控，还是需要指定一个。它是用来确定库支持的最低系统版本的。&lt;/li>
&lt;li>&lt;code>-DCMAKE_TOOLCHAIN_FILE=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/build/cmake/android.toolchain.cmake&lt;/code>，这是上面提到的预设文件。需要注意的是，NDK中有多个以这个名字命名的文件，假如指定错误，可能会导致CMake出错，所以我的经验就是，更改版本号（&lt;code>C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669&lt;/code>）及前面的路径，后面的保持不变。&lt;/li>
&lt;li>&lt;code>-DCMAKE_MAKE_PROGRAM=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/prebuilt/windows-x86_64/bin/make&lt;/code>最后一个参数是指定&lt;code>make&lt;/code>程序的路径，由于我们指定生成了make项目的代码，而Windows通常没有make可执行文件，所以我们需要让CMake找到make文件以完成编译。这里我的经验也是保持后面的不变，修改前面的，并保持版本一致以避免BUG。&lt;/li>
&lt;li>&lt;code>-DCMAKE_BUILD_TYPE=Release&lt;/code>，指定构建类型，这应该很常见了。&lt;/li>
&lt;/ul>
&lt;p>至此Windows交叉编译Android库的所有配置都讲解完了。让我们来看看它完整的例子&lt;/p>
&lt;pre tabindex="0">&lt;code>@echo off
rd /s /q build
mkdir build
cd build
cmake -G &amp;#34;Unix Makefiles&amp;#34; ^
-DCMAKE_TOOLCHAIN_FILE=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/build/cmake/android.toolchain.cmake ^
-DCMAKE_MAKE_PROGRAM=C:/Users/Leroene/AppData/Local/Android/Sdk/ndk/21.0.6113669/prebuilt/windows-x86_64/bin/make ^
-DANDROID_PLATFORM=android-28 ^
-DCMAKE_SYSTEM_NAME=Android ^
-DANDROID_ABI=x86 ^
-DCMAKE_BUILD_TYPE=Release ^
../3rd
cmake --build .
&lt;/code>&lt;/pre>&lt;p>从上面可以看到，这些选项后面都跟着一个&lt;code>^&lt;/code>符号，这不是cmake的一部分，只是为了我们阅读方便，特意书写成这样的，这是在Windows平台上批处理使用的命令换行符，它的作用就是告诉命令解析器，这个命令还没有结束，接着往下面解析，该功能在Linux,MacOS上对应于&lt;code>\&lt;/code>。现在有了这些配置之后，该怎么使用呢？其实也很简单，只需要将这些命令存储在&lt;code>android.bat&lt;/code>文件中，在CMD中切换到当前目录，执行这个文件就能在&lt;code>build&lt;/code>目录中找到以&lt;code>libsum.a&lt;/code>命名的静态库文件了。下一步，我们试着用这个库文件运行在模拟器中。&lt;/p>
&lt;h1 id="在android项目中使用cmake">在Android项目中使用CMake&lt;/h1>
&lt;p>在Android平台中，也使用CMake来管理jni的项目，配合Gradle一起完成构建工作。这和普通的CMake项目最大的不同是，我们通常需要引用多个Android相关的库，如&lt;code>log&lt;/code>,&lt;code>android&lt;/code>等.这些库通常是由NDK提供的，我们仿照默认生成的&lt;code>CMakeLists.txt&lt;/code>文件编写就可。&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;p>接下来，为了描述方便，我们先来看一下现在的目录结构（为了避免混乱，这里只列出比较有代表性的文件）&lt;/p>
&lt;pre tabindex="0">&lt;code>CMakeProject
│ android.bat
│ CMakeLists.txt
│ main.cpp
│
├─3rd
│ CMakeLists.txt
│ lib.cpp
│ lib.h
│
└─Android
│ build.gradle
│
├─app
│ │ build.gradle
│ │
│ ├─libs
│ └─src
│ ├─main
│ │ │ AndroidManifest.xml
│ │ │
│ │ ├─cpp
│ │ │ CMakeLists.txt
│ │ │ native-lib.cpp
│ │ │
│ │ ├─java
│ │ │ └─me
│ │ │ └─hongui
│ │ │ └─cmakesum
│ │ │ MainActivity.kt
│ │ │
│ │ ├─jniLibs
│ │ │ └─x86
│ │ │ libsum.a
&lt;/code>&lt;/pre>&lt;p>在原来的目录根目录下新建了&lt;code>Android&lt;/code>子目录，该目录是一个Android C++工程，所以相比其他普通Android工程，它多了个&lt;code>cpp&lt;/code>目录，后面我们主要的修改都是发生在该目录下。&lt;/p>
&lt;p>原来的根目录，为了不增加复杂度，我们只作为生成静态库的功能存在，所以和上面的示例相比，没有任何修改。&lt;/p>
&lt;h2 id="构建静态库">构建静态库&lt;/h2>
&lt;p>首先，我们回到根目录。使用根目录下的&lt;code>android.bat&lt;/code>批处理生成Android上可用的静态库，也可以修改&lt;code>android.bat&lt;/code>文件中的&lt;code>-DANDROID_ABI&lt;/code>选项的值，生成其他架构的静态库，但这需要和&lt;code>jniLibs&lt;/code>目录下的目录要一一对应，否则可能链接失败。如我生成的&lt;code>libsum.a&lt;/code>文件是&lt;code>x86&lt;/code>的架构。那么就需要在&lt;code>jniLibs&lt;/code>目录下新建&lt;code>x86&lt;/code>的目录下，然后再把&lt;code>libsum.a&lt;/code>放到该目录下。至此，静态库的构建工作就算结束了。&lt;/p>
&lt;h2 id="使用静态库">使用静态库&lt;/h2>
&lt;p>把静态库放到合适的位置后，我们需要配置&lt;code>app&lt;/code>目录下的&lt;code>build.gradle&lt;/code>和&lt;code>cpp&lt;/code>目录下的&lt;code>CMakeLists.txt&lt;/code>文件，完成静态库的引入。&lt;/p>
&lt;h3 id="配置gradle">配置Gradle&lt;/h3>
&lt;p>首先说&lt;code>build.gradle&lt;/code>，该文件主要涉及到修改ABI的问题，因为不指定的话，Gradle默认生成的ABI可能找不到对应的静态库文件来链接，从而导致链接失败。该文件主要的修改如下&lt;/p>
&lt;pre tabindex="0">&lt;code>android {
defaultConfig {
externalNativeBuild {
cmake {
cppFlags &amp;#34;&amp;#34;
abiFilters &amp;#34;x86&amp;#34;
}
}
}
}
&lt;/code>&lt;/pre>&lt;p>也就是把&lt;code>abiFilters&lt;/code>的值指定为刚才构建的静态库相同的值。&lt;/p>
&lt;h3 id="配置cmake">配置CMake&lt;/h3>
&lt;p>而&lt;code>CMakeLists.txt&lt;/code>文件就复杂一些了，它需要完成两个工作，找到静态库和静态库的头文件，链接静态库。&lt;/p>
&lt;h4 id="找到头文件">找到头文件&lt;/h4>
&lt;p>在文章的第二部分我们已经知道了让CMake找到头文件的&lt;code>include_directories&lt;/code>命令，把参数设置为&lt;code>3rd&lt;/code>目录就行了。值得注意的是，CMake是以当前的&lt;code>CMakeLists.txt&lt;/code>文件为工作目录的，所以，要指定到&lt;code>3rd&lt;/code>文件，我们需要一直回退目录到根项目，最终就有了&lt;code>include_directories(../../../../../3rd)&lt;/code>这样的配置。尽量使用相对路径，可以在多人协同的情况下，不用修改配置。&lt;/p>
&lt;h4 id="找到静态库">找到静态库&lt;/h4>
&lt;p>下一步要让CMake找到我们的静态库。说到库，都是和&lt;code>add_library&lt;/code>相关的，不同的只是参数。使用源码添加库的时候，我们需要指定库的名称和源码位置，而引用第三方库，则是需要指定库的名称和类型，外加一个&lt;code>IMPORTED&lt;/code>的指示参数，告诉CMake这个库是导入的。所以就有了&lt;code>add_library(addSum STATIC IMPORTED)&lt;/code>这样的配置。&lt;/p>
&lt;p>但是，这里我们只告诉了CMake库的名字，库存储在哪里，还不知道，所以我们还需要另一个命令告诉CMake库的存储位置。涉及到配置参数的，通常就是&lt;code>set_target_properties&lt;/code>命令了，可以多次调用这个命令设置多种配置。&lt;code>set_target_properties(addSum PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/../jniLibs/${ANDROID_ABI}/libsum.a)&lt;/code>,第一个参数和上一条的第一个参数是一一对应的，可以随便取。其实&lt;code>add_library&lt;/code>相当于生成了一种目标产物，用第一个参数来指代这种产物，所以才让我们的&lt;code>set_target_properties&lt;/code>找得到合适的目标设置属性。第二个参数则是配置属性的标准写法，第三个代表属性变量，第四个是属性值，配置库路径的变量就是&lt;code>IMPORTED_LOCATION&lt;/code>，而值这里就有个坑了，Android下的CMake限定值必须是绝对路径，不能是相对路径。而这与使用CMake的初衷背道而驰，幸好，我们有几个预设值可以用，&lt;code>CMAKE_CURRENT_SOURCE_DIR&lt;/code>就是其中之一，它代表着当前这个&lt;code>CMakeLIsts.txt&lt;/code>文件的绝对路径，有了这个，再加上目录的回退功能，我们就能找到任何合适的目录了。至此，又出现了第二个问题，当有多个架构的静态库需要配置时，我们引入的目录是不一样的，而且会出现很多重复的配置。还好有&lt;code>ANDROID_ABI&lt;/code>的帮助，它指代了当前编译的某个架构，随着编译的进行，这个值会被设置为合适的值，并且是和正在编译的架构是一一对应的。所以，尽管它们有点奇怪，但是这给我带来了灵活和简单。&lt;/p>
&lt;h4 id="链接静态库">链接静态库&lt;/h4>
&lt;p>现在头文件有了，库也有了，但是C++的编译是分成两步的，目前为止，我们的工作只做完了编译的事情，还没涉及到链接的事情，当然，相比前面的配置，这就简单多了，无疑就是在&lt;code>target_link_libraries&lt;/code>命令里添加一个参数就可，如&lt;/p>
&lt;pre tabindex="0">&lt;code>target_link_libraries(
native-lib
${log-lib}
addSum
)
&lt;/code>&lt;/pre>&lt;p>只需哟注意名字和&lt;code>add_library&lt;/code>时配置的名字一一对应就可。&lt;/p>
&lt;h3 id="在源码中使用">在源码中使用&lt;/h3>
&lt;p>经过漫长的等待，现在我们终于能在&lt;code>native-lib.cpp&lt;/code>文件中引入&lt;code>addsum&lt;/code>的头文件，并且使用里面的函数完成工作了。我打算让函数返回一个包含加法运算结果的字符串。最终实现如下&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;jni.h&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;lib.h&amp;gt;
extern &amp;#34;C&amp;#34; JNIEXPORT jstring JNICALL
Java_me_hongui_cmakesum_MainActivity_stringFromJNI(
JNIEnv* env,
jobject /* this */) {
std::string hello = std::to_string(sum(1,1));
return env-&amp;gt;NewStringUTF(hello.c_str());
}
&lt;/code>&lt;/pre>&lt;p>至此，点击工具栏上的&lt;code>run&lt;/code>按钮，我们终于可以在Android的模拟器上看到我们的静态库工作的成果啦。&lt;/p>
&lt;h2 id="扩展">扩展&lt;/h2>
&lt;p>其实除了引用静态库的方式之外，我们还可以直接通过配置&lt;code>CMakeLists.txt&lt;/code>文件来引用源码，这样可以随时随地对源码进行定制，但是也降低了编译速度，而且可能会增加&lt;code>CMakeLists.txt&lt;/code>的复杂度。所以我还是推荐直接使用静态库的方式。&lt;/p>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>CMake其实还有很多很多命令，我们这里涉及到的只是很少的一部分。但是，我觉得理解CMake有这些内容差不多就可以了，后续有需要再针对性学习就行了。学习一门技术，切忌不能贪多，贪细。先要抓住主干，理清脉络，后面的细节就是水到渠成的事。对于CMake，我觉得就是以C++代码编译为二进制的过程为主干就够了。源码从哪里来，头文件在那里，库文件在哪里，怎么组织编译，参与链接的库有哪些，生成什么产物，还有一些完成这些工作的通用操作，复制文件啊，目录信息啊等，这些操作的集合就构成了CMake的主体。另外，CMake其实只是一种构建工具，它本身不是编译器和链接器，有些问题可能不仅仅会涉及到cmake，还可能会涉及到编译器和连接器。当然，这些都是后面深入了解之后才可能碰到的问题了。&lt;/p></description></item></channel></rss>