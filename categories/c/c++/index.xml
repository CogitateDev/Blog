<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on 低头沉思</title><link>https://deep-thinking.top/categories/c/c++/</link><description>Recent content in C/C++ on 低头沉思</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 12 Sep 2021 21:34:45 +0800</lastBuildDate><atom:link href="https://deep-thinking.top/categories/c/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Android-JNI开发概论</title><link>https://deep-thinking.top/posts/a-introduction-to-android-jni/</link><pubDate>Sun, 12 Sep 2021 21:34:45 +0800</pubDate><guid>https://deep-thinking.top/posts/a-introduction-to-android-jni/</guid><description>&lt;h3 id="什么是jni开发" class="relative group">什么是JNI开发 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e4%bb%80%e4%b9%88%e6%98%afjni%e5%bc%80%e5%8f%91" aria-label="">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>JNI的全称是Java Native Interface，顾名思义，这是一种解决Java和C/C++相互调用的编程方式。&lt;em>&lt;strong>它其实只解决两个方面的问题，怎么找到和怎么访问。&lt;/strong>&lt;/em> 弄清楚这两个话题，我们就学会了JNI开发。&lt;em>&lt;strong>需要注意的是，JNI开发只涉及到一小部分C/C++开发知识，遇到问题的时候我们首先要判断是C/C++的问题还是JNI的问题，这可以节省很多搜索和定位的时间。&lt;/strong>&lt;/em>&lt;/p></description></item><item><title>CMake个人理解和使用</title><link>https://deep-thinking.top/posts/personal-understanding-and-usage-of-cmake/</link><pubDate>Mon, 09 Aug 2021 19:21:49 +0800</pubDate><guid>https://deep-thinking.top/posts/personal-understanding-and-usage-of-cmake/</guid><description>&lt;h3 id="前言" class="relative group">前言 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e5%89%8d%e8%a8%80" aria-label="">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>CMake是一个构建工具，通过它可以很容易创建跨平台的项目。通常使用它构建项目要分两步，通过源代码生成工程文件，通过工程文件构建目标产物（可能是动态库，静态库，也可能是可执行程序）。使用CMake的一个主要优势是在多平台或者多人协作的项目中，开发人员可以根据自己的喜好来使选择IDE，不用受其他人工程配置的影响，它有点像跨平台的IDE，通过它配置好相关设置之后，可以在多个平台无缝衔接，提高开发效率。&lt;/p></description></item></channel></rss>